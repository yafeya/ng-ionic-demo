{"version":3,"sources":["node_modules/tslib/tslib.es6.js","ng://yafeya-system-common/lib/system/xml/XObject.ts","ng://yafeya-system-common/lib/system/xml/XElement.ts","ng://yafeya-system-common/lib/system/common/Guid.ts","ng://yafeya-system-common/lib/system/common/StringBuilder.ts","ng://yafeya-system-common/lib/system/common/XmlConverter.ts","ng://yafeya-system-common/lib/system/common/Clipboard.ts","ng://yafeya-system-common/lib/system/common/JsonToken.ts","ng://yafeya-system-common/lib/system/collections/EnumerableIterator.ts","ng://yafeya-system-common/lib/system/collections/Enumerable.ts","ng://yafeya-system-common/lib/system/collections/Collection.ts","ng://yafeya-system-common/lib/system/collections/List.ts","ng://yafeya-system-common/lib/system/collections/IGrouping.ts","ng://yafeya-system-common/lib/system/collections/NamedDictionary.ts","ng://yafeya-system-common/lib/system/collections/KeyValuePair.ts","ng://yafeya-system-common/lib/system/collections/Dictionary.ts","ng://yafeya-system-common/lib/system/collections/ObservableCollection.ts","ng://yafeya-system-common/lib/system/collections/CollectionExtensions.ts","ng://yafeya-system-common/lib/system/common/WindowSizeWatcher.ts","ng://yafeya-system-common/lib/system/xml/XDocument.ts","ng://yafeya-system-common/lib/system/xml/XAttribute.ts","ng://yafeya-system-common/lib/system/command/ICommand.ts","ng://yafeya-system-common/lib/system/command/CommandRepository.ts","ng://yafeya-system-common/lib/system/Tokens.ts","ng://yafeya-system-common/lib/system/command/InvokeCommandDirective.ts","ng://yafeya-system-common/lib/system/command/CommandDescriptor.ts","ng://yafeya-system-common/lib/system/command/CommandDescriptorRepository.ts","ng://yafeya-system-common/lib/system/command/CommandDescriptorExtensions.ts","ng://yafeya-system-common/lib/system/settings/AppSettingItem.ts","ng://yafeya-system-common/lib/system/settings/AppSettings.ts","ng://yafeya-system-common/lib/system/settings/IOptionRepository.ts","ng://yafeya-system-common/lib/system/resource/ResourceDictionary.ts","ng://yafeya-system-common/lib/system/resource/ResourceHolder.ts","ng://yafeya-system-common/lib/system/logging/LogLevel.ts","ng://yafeya-system-common/lib/system/logging/Logger.ts","ng://yafeya-system-common/lib/system/logging/DefaultLoggerFactory.ts","ng://yafeya-system-common/lib/system/logging/LoggerBase.ts","ng://yafeya-system-common/lib/system/logging/debug/DebugLogger.ts","ng://yafeya-system-common/lib/system/logging/debug/DebugLoggerProvider.ts","ng://yafeya-system-common/lib/system/logging/log4js/Log4JsLogger.ts","ng://yafeya-system-common/lib/system/io/File.ts","ng://yafeya-system-common/lib/system/io/Directory.ts","ng://yafeya-system-common/lib/system/logging/log4js/Log4JsLoggerProvider.ts","ng://yafeya-system-common/lib/system/logging/LoggerFactoryExtensions.ts","ng://yafeya-system-common/lib/system/exception/LoggingExceptionHandler.ts","ng://yafeya-system-common/lib/system/net/HttpClient.ts","ng://yafeya-system-common/lib/system/utilities/ElectronUtil.ts","ng://yafeya-system-common/lib/system/services/AngularServiceProvider.ts","ng://yafeya-system-common/lib/system/services/ServiceLocator.ts","ng://yafeya-system-common/lib/system/extensions/StringExtensions.ts","ng://yafeya-system-common/lib/system/extensions/ObjectExtensions.ts","ng://yafeya-system-common/lib/system/extensions/ArrayExtensions.ts","ng://yafeya-system-common/lib/system/extensions/DocumentExtensions.ts","ng://yafeya-system-common/lib/system/extensions/Functions.ts","ng://yafeya-system-common/lib/system/action/ActionRepository.ts","ng://yafeya-system-common/lib/system/action/Action.ts","ng://yafeya-system-common/lib/system/message-mediator/MessageMediator.ts","ng://yafeya-system-common/lib/system/component/ComponentCreator.ts","ng://yafeya-system-common/lib/system/system.module.ts"],"names":["extendStatics","d","b","Object","setPrototypeOf","__proto__","Array","p","hasOwnProperty","__extends","__","this","constructor","prototype","create","__values","o","m","Symbol","iterator","i","call","next","length","value","done","XObject","name","Name","Value","defineProperty","mDocument","XElement","_super","_this","tslib_1.__extends","AppendChild","element","Error","Elements","push","Document","Parent","AppendAttribute","attribute","Attributes","ToXmlElement","doc","createElement","console","log","appendChild","document","createTextNode","forEach","setAttribute","child","ToXmlString","builder","Append","Build","Guid","TypeError","Empty","toString","IsGuid","IsEmpty","ToString","ToJson","Generate","count","out","Math","random","substring","New","join","Validator","test","RegExp","StringBuilder","content","item","AppendSingle","AppendLine","AppendLines","items","x","latest","Join","delimiter","Dispose","XmlConverter","xml","Xml2Js","Parser","toJson","Clipboard","ContainsImage","clipboard","availableFormats","some","GetImage","readImage","GetAvailableFormats","GetImageUrl","url","image","toDataURL","GetPngImage","data","toPNG","GetPngBase64Image","Clear","clear","SetText","text","writeText","e","temp","body","textContent","currentFocus","activeElement","focus","setSelectionRange","execCommand","removeChild","GetText","readText","GetHtml","readHTML","SetHtml","writerHTML","GetRTF","readRTF","SetRTF","writerRTF","JsonToken","Decode","token","parts","split","decoded","urlBase64Decode","JSON","parse","str","output","replace","decodeURIComponent","encodeURI","window","atob","EnumerableIterator","enumerable","pointer","Count","Items","Enumerable","From","array","list","Collection","Add","AddRange","items_1","tslib_1.__values","items_1_1","Contains","indexOf","Remove","index","splice","CopyTo","arrayIndex","_b","_c","List","IndexOf","Insert","RemoveAt","Grouping","key","elements","NamedDictionary","ContainsKey","Item","Keys","keySet","prop","Values","values","KeyValuePair","Dictionary","Map","map","set","has","get","keys","FirstOrDefault","Key","delete","ObservableCollection","scheduler","_isScalar","Create","dispatch","state","subscriber","complete","closed","schedule","_subscribe","Observable","ForEach","action","Sort","comparer","sort","FindAll","predicate","result","Any","Max","selector","Select","reduce","a","max","Min","min","OrderBy","keySelector","OrderByDescending","Where","filter","ElementAt","GroupBy","valueSelector","dictionary","groups","WindowSizeWatcherToken","InjectionToken","WindowSizeWatcher","handlers","Start","self","onresize","Handle","Width","innerWidth","Height","innerHeight","handler","OnSizeChanged","XDocument","mRoot","implementation","createDocument","Root","BuildXmlString","Common.StringBuilder","XAttribute","DelegateCommand","canExecute","CanExecute","param","Execute","error","CommandRepository","GetCommand","Commands","Register","command","Injectable","MessageMediatorToken","LoggerFactoryToken","ExceptionHandlerToken","CommandRepositoryToken","CommandDescriptorRepositoryToken","ActionRepositoryToken","InvokeCommandDirective","commandRepository","loggerFactory","logger","CreateLogger","OnClicked","Debug","CommandName","stringify","CommandParam","String","IsValid","Directive","args","Inject","Input","HostListener","CommandDescriptor","Header","Group","Icon","Image","Description","Id","Tag","Shortcut","CommandDescriptorRepository","descriptors","descriptor","RemoveRange","expression","Descriptors","CommandDescriptorExtensions","GetDescriptorsByGroup","group","AppSettingItem","AppSettings","Collections.NamedDictionary","GetItem","defaultValue","AddItem","existing","SetValue","OptionRepositoryToken","Collections.Dictionary","OptionRepository","Find","Collections.Enumerable","FindOne","id","ResourceDictionary","mInnerDictionary","Get","ResourceHolder","GetResources","local","AddResources","resource","GetString","culture","DefaultLocal","resources","Trace","Information","Warning","Critical","None","Logger","Collections.List","MessageFormatter","providers","GetProviders","loggers","Log","level","eventId","formatter","errors","IsEnabled","message","LogLevel","Info","Warn","Fatal","AddProvider","provider","DefaultLoggerFactory","LoggerBase","DebugLogger","Date","toLocaleTimeString","DebugLoggerProvider","Log4JsLogger","log4JsLogger","debug","trace","info","warn","fatal","rawLevel","levelStr","isLevelEnabled","File","Exists","filename","existed","fs","existsSync","writeFileSync","Delete","unlinkSync","ReadAllText","encoding","readFileSync","undefined","Copy","source","target","overwrite","goodToWrite","sourceStream","createReadStream","pipe","createWriteStream","FindFolder","folder","substr","lastIndexOf","IsNullOrEmpty","Directory","electron","remote","app","GetUserDataFolder","App","getPath","GetAppDataFolder","GetMyDocumentFolder","GetPictureFolder","GetCurrentFolder","GetTempFolder","GetAppName","getName","ShowItemInFolder","shell","showItemInFolder","Exist","accessSync","F_OK","EnsureFolderExist","mkdirSync","Combine","path1","path2","path","Log4JsLoggerProvider","initializer","logFileName","directory","IO.Directory","file","log4js","configure","appenders","type","maxLogSize","backups","categories","default","loggerName","log4Logger","getLogger","LoggerFactoryExtensions","AddDebug","AddLog4Js","AddLogJs","LoggingExceptionHandler","exception","HttpClient","http","exceptionHandler","headers","Headers","append","errorHandler","Post","Promise","resolve","reject","OutputDebugging","post","toPromise","then","response","json","catch","PostRaw","useRaw","UseToken","CreateDefaultHeader","UseHeader","Http","ExceptionHandling.LoggingExceptionHandler","Logging.DefaultLoggerFactory","ElectronUtil","Menu","ipcRenderer","OpenFileDialog","filters","dialog","showOpenDialog","properties","OpenFilesDialog","TextFileFilter","extensions","ImageFileFilter","OpenImageDialog","OpenImagesDialog","SetApplicationMenu","menu","setApplicationMenu","OpenExternal","openExternal","ReadFileAsync","readFile","EncodingHelper","decode","ReadFileLineByLine","lines","stream","EventStream","mapSync","line","pause","resume","on","ReadFileAsBase64Async","fullPath","NormalizePath","Buffer","ReadFileAsBase64","ReadFileStream","WriteFileAsync","writeFile","GetMimeType","Mime","lookup","GetFilename","Path","basename","GetFilenameWithoutExtension","GetFileSize","statSync","GetFileSizeString","size","FileSize","ConverToFileSizeString","Encrypt","cipher","Crypts","createCipher","algorithm","password","crypted","update","final","Decrypt","decipher","createDecipher","dec","CombinePath","base","paths","NjPath","normalize","CreateGuidString","Common.Guid","CreateGuid","AngularServiceProvider","injector","GetService","Injector","ServiceLocator","SetLocatorProvider","currentProvider","ToLower","toLowerCase","ToUpper","toUpperCase","Trim","Normalize","StartsWith","part","slice","EndsWith","CapFirst","CapWords","words","capFirst","trim","TruncateWords","num","StripHtml","EscapeHtml","val","Slugify","lower","HtmlToText","CountWord","symbols","c","ValidateEmail","LastIndexOf","SubString","start","IsObject","isArray","callback","partial","strict","contains","IndexOfPartial","ToObjectArray","objName","SelectOne","querySelector","SelectAll","querySelectorAll","html","placeholder","innerHTML","childNodes","NodeList","Last","Element","Attribute","getAttribute","parentNode","HasMatches","matches","msMatchesSelector","Up","el","closest","parentElement","First","_decend","node","_currentNode","nodeList","nodeName","insertAdjacentHTML","Drop","RemoveEvent","event","evt","removeEventListener","detachEvent","AddEvent","addEventListener","Show","t","styles","setValueByKey","Hide","Toggle","offsetWidth","offsetHeight","getClientRects","hide","show","AddClass","className","RemoveClass","AsString","outerHTML","IsHidden","offsetParent","HTMLElement","Clean","innerText","checked","name_1","idx","elem","options","selectedIndex","name_2","ActionRepository","Actions","Action","delegate","Invoke","MessageMediator","mediators","RegisterHandler","topic","UnregisterHandler","SendMessage","ComponentCreatorToken","ComponentCreator","mViewContainer","mComponentFactoryResolver","Initialize","viewContainer","resolver","CreateComponent","componentType","factory","ComponentFactoryResolver","resolveComponentFactory","createComponent","ViewContainer","components","directives","Common.InvokeCommandDirective","Common.DefaultLoggerFactory","Common.HttpClient","Common.LoggingExceptionHandler","Common.CommandRepository","Common.CommandDescriptorRepository","Common.ElectronUtil","Common.AngularServiceProvider","Common.ServiceLocator","Common.MessageMediator","Common.ComponentCreator","Common.OptionRepository","provide","Common.ActionRepositoryToken","useClass","Common.ActionRepository","Common.CommandRepositoryToken","Common.CommandDescriptorRepositoryToken","Common.ExceptionHandlerToken","Common.LoggerFactoryToken","Common.MessageMediatorToken","Common.ComponentCreatorToken","Common.OptionRepositoryToken","Common.WindowSizeWatcherToken","Common.WindowSizeWatcher","exportItems","NgModule","declarations","imports","CommonModule","HttpModule","JsonpModule","exports","IsDefined","MergeDeep","assign","_a","Clone","CompareProperties","arrayX","arrayY","names","getOwnPropertyNames","names_1","names_1_1","property","getOwnPropertyDescriptor","elapse","setTimeout"],"mappings":"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","sourcesContent":["/*! *****************************************************************************\r\nCopyright (c) Microsoft Corporation. All rights reserved.\r\nLicensed under the Apache License, Version 2.0 (the \"License\"); you may not use\r\nthis file except in compliance with the License. You may obtain a copy of the\r\nLicense at http://www.apache.org/licenses/LICENSE-2.0\r\n\r\nTHIS CODE IS PROVIDED ON AN *AS IS* BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY\r\nKIND, EITHER EXPRESS OR IMPLIED, INCLUDING WITHOUT LIMITATION ANY IMPLIED\r\nWARRANTIES OR CONDITIONS OF TITLE, FITNESS FOR A PARTICULAR PURPOSE,\r\nMERCHANTABLITY OR NON-INFRINGEMENT.\r\n\r\nSee the Apache Version 2.0 License for specific language governing permissions\r\nand limitations under the License.\r\n***************************************************************************** */\r\n/* global Reflect, Promise */\r\n\r\nvar extendStatics = function(d, b) {\r\n    extendStatics = Object.setPrototypeOf ||\r\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\r\n        function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };\r\n    return extendStatics(d, b);\r\n};\r\n\r\nexport function __extends(d, b) {\r\n    extendStatics(d, b);\r\n    function __() { this.constructor = d; }\r\n    d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\r\n}\r\n\r\nexport var __assign = function() {\r\n    __assign = Object.assign || function __assign(t) {\r\n        for (var s, i = 1, n = arguments.length; i < n; i++) {\r\n            s = arguments[i];\r\n            for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p)) t[p] = s[p];\r\n        }\r\n        return t;\r\n    }\r\n    return __assign.apply(this, arguments);\r\n}\r\n\r\nexport function __rest(s, e) {\r\n    var t = {};\r\n    for (var p in s) if (Object.prototype.hasOwnProperty.call(s, p) && e.indexOf(p) < 0)\r\n        t[p] = s[p];\r\n    if (s != null && typeof Object.getOwnPropertySymbols === \"function\")\r\n        for (var i = 0, p = Object.getOwnPropertySymbols(s); i < p.length; i++) if (e.indexOf(p[i]) < 0)\r\n            t[p[i]] = s[p[i]];\r\n    return t;\r\n}\r\n\r\nexport function __decorate(decorators, target, key, desc) {\r\n    var c = arguments.length, r = c < 3 ? target : desc === null ? desc = Object.getOwnPropertyDescriptor(target, key) : desc, d;\r\n    if (typeof Reflect === \"object\" && typeof Reflect.decorate === \"function\") r = Reflect.decorate(decorators, target, key, desc);\r\n    else for (var i = decorators.length - 1; i >= 0; i--) if (d = decorators[i]) r = (c < 3 ? d(r) : c > 3 ? d(target, key, r) : d(target, key)) || r;\r\n    return c > 3 && r && Object.defineProperty(target, key, r), r;\r\n}\r\n\r\nexport function __param(paramIndex, decorator) {\r\n    return function (target, key) { decorator(target, key, paramIndex); }\r\n}\r\n\r\nexport function __metadata(metadataKey, metadataValue) {\r\n    if (typeof Reflect === \"object\" && typeof Reflect.metadata === \"function\") return Reflect.metadata(metadataKey, metadataValue);\r\n}\r\n\r\nexport function __awaiter(thisArg, _arguments, P, generator) {\r\n    return new (P || (P = Promise))(function (resolve, reject) {\r\n        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }\r\n        function rejected(value) { try { step(generator[\"throw\"](value)); } catch (e) { reject(e); } }\r\n        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }\r\n        step((generator = generator.apply(thisArg, _arguments || [])).next());\r\n    });\r\n}\r\n\r\nexport function __generator(thisArg, body) {\r\n    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;\r\n    return g = { next: verb(0), \"throw\": verb(1), \"return\": verb(2) }, typeof Symbol === \"function\" && (g[Symbol.iterator] = function() { return this; }), g;\r\n    function verb(n) { return function (v) { return step([n, v]); }; }\r\n    function step(op) {\r\n        if (f) throw new TypeError(\"Generator is already executing.\");\r\n        while (_) try {\r\n            if (f = 1, y && (t = op[0] & 2 ? y[\"return\"] : op[0] ? y[\"throw\"] || ((t = y[\"return\"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;\r\n            if (y = 0, t) op = [op[0] & 2, t.value];\r\n            switch (op[0]) {\r\n                case 0: case 1: t = op; break;\r\n                case 4: _.label++; return { value: op[1], done: false };\r\n                case 5: _.label++; y = op[1]; op = [0]; continue;\r\n                case 7: op = _.ops.pop(); _.trys.pop(); continue;\r\n                default:\r\n                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }\r\n                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }\r\n                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }\r\n                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }\r\n                    if (t[2]) _.ops.pop();\r\n                    _.trys.pop(); continue;\r\n            }\r\n            op = body.call(thisArg, _);\r\n        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }\r\n        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };\r\n    }\r\n}\r\n\r\nexport function __exportStar(m, exports) {\r\n    for (var p in m) if (!exports.hasOwnProperty(p)) exports[p] = m[p];\r\n}\r\n\r\nexport function __values(o) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator], i = 0;\r\n    if (m) return m.call(o);\r\n    return {\r\n        next: function () {\r\n            if (o && i >= o.length) o = void 0;\r\n            return { value: o && o[i++], done: !o };\r\n        }\r\n    };\r\n}\r\n\r\nexport function __read(o, n) {\r\n    var m = typeof Symbol === \"function\" && o[Symbol.iterator];\r\n    if (!m) return o;\r\n    var i = m.call(o), r, ar = [], e;\r\n    try {\r\n        while ((n === void 0 || n-- > 0) && !(r = i.next()).done) ar.push(r.value);\r\n    }\r\n    catch (error) { e = { error: error }; }\r\n    finally {\r\n        try {\r\n            if (r && !r.done && (m = i[\"return\"])) m.call(i);\r\n        }\r\n        finally { if (e) throw e.error; }\r\n    }\r\n    return ar;\r\n}\r\n\r\nexport function __spread() {\r\n    for (var ar = [], i = 0; i < arguments.length; i++)\r\n        ar = ar.concat(__read(arguments[i]));\r\n    return ar;\r\n}\r\n\r\nexport function __await(v) {\r\n    return this instanceof __await ? (this.v = v, this) : new __await(v);\r\n}\r\n\r\nexport function __asyncGenerator(thisArg, _arguments, generator) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var g = generator.apply(thisArg, _arguments || []), i, q = [];\r\n    return i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i;\r\n    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }\r\n    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }\r\n    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }\r\n    function fulfill(value) { resume(\"next\", value); }\r\n    function reject(value) { resume(\"throw\", value); }\r\n    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }\r\n}\r\n\r\nexport function __asyncDelegator(o) {\r\n    var i, p;\r\n    return i = {}, verb(\"next\"), verb(\"throw\", function (e) { throw e; }), verb(\"return\"), i[Symbol.iterator] = function () { return this; }, i;\r\n    function verb(n, f) { i[n] = o[n] ? function (v) { return (p = !p) ? { value: __await(o[n](v)), done: n === \"return\" } : f ? f(v) : v; } : f; }\r\n}\r\n\r\nexport function __asyncValues(o) {\r\n    if (!Symbol.asyncIterator) throw new TypeError(\"Symbol.asyncIterator is not defined.\");\r\n    var m = o[Symbol.asyncIterator], i;\r\n    return m ? m.call(o) : (o = typeof __values === \"function\" ? __values(o) : o[Symbol.iterator](), i = {}, verb(\"next\"), verb(\"throw\"), verb(\"return\"), i[Symbol.asyncIterator] = function () { return this; }, i);\r\n    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }\r\n    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }\r\n}\r\n\r\nexport function __makeTemplateObject(cooked, raw) {\r\n    if (Object.defineProperty) { Object.defineProperty(cooked, \"raw\", { value: raw }); } else { cooked.raw = raw; }\r\n    return cooked;\r\n};\r\n\r\nexport function __importStar(mod) {\r\n    if (mod && mod.__esModule) return mod;\r\n    var result = {};\r\n    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];\r\n    result.default = mod;\r\n    return result;\r\n}\r\n\r\nexport function __importDefault(mod) {\r\n    return (mod && mod.__esModule) ? mod : { default: mod };\r\n}\r\n","import {XDocument } from './XDocument';\r\n\r\nexport class XObject {\r\n    Name: string;\r\n    Value: any;\r\n    private mDocument: XDocument;\r\n\r\n    get Document() {\r\n        return this.mDocument;\r\n    }\r\n    set Document(value: XDocument) {\r\n        this.mDocument = value;\r\n    }\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(name: string, value: any) {\r\n        this.Name = name;\r\n        this.Value = value;\r\n    }\r\n\r\n}\r\n","import { XObject } from './XObject';\r\nimport { XAttribute } from './XAttribute';\r\nimport * as Common from '../common/index';\r\n\r\nexport class XElement extends XObject {\r\n    Elements: Array<XElement> = [];\r\n    Attributes: Array<XAttribute> = [];\r\n    Parent: XElement;\r\n\r\n    constructor(name: string, value: any = null) {\r\n        super(name, value);\r\n    }\r\n\r\n    AppendChild(element: XElement): XElement {\r\n        if (!element)\r\n            throw new Error('element is null.');\r\n\r\n        this.Elements.push(element);\r\n        element.Document = this.Document;\r\n        element.Parent = this;\r\n\r\n        return this;\r\n    }\r\n    AppendAttribute(attribute: XAttribute) {\r\n        if (!attribute)\r\n            throw new Error('attribute is null.');\r\n\r\n        this.Attributes.push(attribute);\r\n        attribute.Document = this.Document;\r\n    }\r\n    ToXmlElement(doc: XMLDocument): HTMLElement {\r\n        let element = doc.createElement(this.Name);\r\n        if (this.Value) {\r\n            if (this.Name == \"base64\")\r\n                console.log(this.Value);\r\n            element.appendChild(document.createTextNode(this.Value));\r\n        }\r\n\r\n        this.Attributes.forEach(function (attribute) {\r\n            element.setAttribute(attribute.Name, attribute.Value);\r\n        });\r\n\r\n        this.Elements.forEach(function (child) {\r\n            element.appendChild(child.ToXmlElement(doc));\r\n        });\r\n\r\n        return element;\r\n    }\r\n\r\n    ToXmlString(builder: Common.StringBuilder): string {\r\n\r\n        builder.Append('<' + this.Name + '>');\r\n        if (this.Value) {\r\n            builder.Append(this.Value);\r\n        } else {\r\n            this.Elements.forEach(function (child) {\r\n                child.ToXmlString(builder);\r\n            });\r\n        }\r\n\r\n        builder.Append('</' + this.Name + '>');\r\n        return builder.Build();\r\n    }\r\n}\r\n","\r\nexport class Guid {\r\n    static Empty = '00000000-0000-0000-0000-000000000000';\r\n    static Validator = new RegExp('^[a-z0-9]{8}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{4}-[a-z0-9]{12}$', 'i');\r\n    private value: string;\r\n\r\n    constructor(value: any) {\r\n        if (!value)\r\n            throw new TypeError('Invalid argument; `value` has no value.');\r\n\r\n        this.value = Guid.Empty;\r\n\r\n        if (value && value instanceof Guid) {\r\n            this.value = (value as Guid).Value;\r\n        } else if (value && Object.prototype.toString.call(value) === '[object String]' && Guid.IsGuid(value)) {\r\n            this.value = value;\r\n        }\r\n    }\r\n\r\n    get Value(): string {\r\n        return this.value;\r\n    }\r\n    IsEmpty(): boolean {\r\n        return this.value === Guid.Empty;\r\n    }\r\n    ToString(): string {\r\n        return this.value;\r\n    }\r\n    ToJson(): string {\r\n        return this.value;\r\n    }\r\n\r\n    private static Generate(count): string {\r\n        let out = '';\r\n        for (let i = 0; i < count; i++) {\r\n            out += (((1 + Math.random()) * 0x10000) | 0).toString(16).substring(1);\r\n        }\r\n        return out;\r\n    }\r\n    static New(): Guid {\r\n        return new Guid([Guid.Generate(2), Guid.Generate(1), Guid.Generate(1), Guid.Generate(1), Guid.Generate(3)].join('-'));\r\n    }\r\n    static IsGuid(value: any): boolean {\r\n        return value && (value instanceof Guid || Guid.Validator.test(value.toString()));\r\n    }\r\n\r\n}","import { IDisposable } from './IDisposable';\r\n\r\nexport class StringBuilder implements IDisposable {\r\n    private content = [];\r\n    private latest: string | null = null;\r\n\r\n    get IsEmpty(): boolean {\r\n        return this.content.length === 0;\r\n    }\r\n    Append(item: any): StringBuilder {\r\n        this.AppendSingle(item);\r\n        return this;\r\n    }\r\n    AppendLine(item: any): StringBuilder {\r\n        this.AppendSingle(item);\r\n        this.content.push('\\r\\n');\r\n        return this;\r\n    }\r\n    AppendLines(items: any[]): StringBuilder {\r\n        items.forEach(x => {\r\n            if (x != null) {\r\n                this.AppendLine(x);\r\n            }\r\n        });\r\n        return this;\r\n    }\r\n\r\n    Build(): string {\r\n        if (this.latest != null)\r\n            return this.latest;\r\n        this.latest = this.Join('');\r\n        return this.latest;\r\n    }\r\n    Join(delimiter: string) {\r\n        return this.content.join(delimiter);\r\n    }\r\n\r\n    toString() {\r\n        return this.Build();\r\n    }\r\n    Dispose(): void {\r\n        this.latest = null;\r\n        this.content = [];\r\n    }\r\n    private AppendSingle(item: any): void {\r\n        if (item != null) {\r\n            this.latest = null;\r\n            if (typeof item !== 'string') {\r\n                this.content.push(item.toString());\r\n            } else {\r\n                this.content.push(item);\r\n            }\r\n        }\r\n    }\r\n}","\r\ndeclare var Xml2Js: any;\r\n\r\nexport class XmlConverter {\r\n\r\n    /** Convert Xml to Json */\r\n    ToJson(xml: any): any {\r\n        let parser = Xml2Js.Parser();\r\n        return parser.toJson(xml);\r\n    }\r\n}","\r\ndeclare let clipboard: any;\r\n\r\nexport class Clipboard {\r\n    /**\r\n     * \r\n     */\r\n    ContainsImage(): boolean {\r\n        let formats: string[] = clipboard.availableFormats();\r\n        return formats.some(x => x === 'image/png' || x === 'image/jpeg' || x === 'image/jpg' || x === 'image/gif');\r\n    }\r\n\r\n    /** Get image data from clipboard */\r\n    GetImage(): any {\r\n        let formats = clipboard.availableFormats();\r\n\r\n        let native = clipboard.readImage();\r\n\r\n        return native;\r\n    }\r\n    GetAvailableFormats(): string[] {\r\n        return clipboard.availableFormats();\r\n    }\r\n    /**\r\n     * Get image data URL\r\n     */\r\n    GetImageUrl(): string {\r\n        let url = '';\r\n        let image = this.GetImage();\r\n        if (image) {\r\n            url = image.toDataURL();\r\n        }\r\n        return url;\r\n    }\r\n    /** Get PNG format image encoded with base64 */\r\n    GetPngImage(): any {\r\n        let data: any;\r\n        let image = this.GetImage();\r\n        if (image) {\r\n            data = image.toPNG();\r\n        }\r\n        return data;\r\n    }\r\n    /** Get PNG format image encoded with base64 */\r\n    GetPngBase64Image(): string {\r\n        let data = '';\r\n        let image = this.GetImage();\r\n        if (image) {\r\n            let buffer = image.toPNG();\r\n            data = buffer.toString('base64');\r\n        }\r\n        return data;\r\n    }\r\n    Clear(): void {\r\n        clipboard.clear();\r\n    }\r\n    /**  Clears the Clipboard and then adds text data in the Text or UnicodeText format, depending on the operating system.*/\r\n    SetText(text: string): void {\r\n        try {\r\n            if (clipboard !== null) {\r\n                clipboard.writeText(text);\r\n            }\r\n        } catch (e) {\r\n            console.log(e);\r\n        }\r\n\r\n        if (document) {\r\n            try {\r\n\r\n                let temp = document.createElement('textarea');\r\n                document.body.appendChild(temp);\r\n                temp.textContent = text;\r\n                let currentFocus: any = document.activeElement;\r\n                temp.focus();\r\n                temp.setSelectionRange(0, temp.value.length);\r\n                document.execCommand('copy');\r\n                if (currentFocus) {\r\n                    currentFocus.focus();\r\n                }\r\n                document.body.removeChild(temp);\r\n            } catch (e) {\r\n                console.log(e);\r\n            }\r\n        }\r\n    }\r\n    /**\r\n     * Get text conent from clipboard\r\n     */\r\n    GetText(): string {\r\n        return clipboard.readText();\r\n    }\r\n    /**\r\n     * Get HTML fromat text content from clipboard\r\n     */\r\n    GetHtml(): string {\r\n        return clipboard.readHTML();\r\n    }\r\n    /**\r\n     * Set HTML format content to clipboard\r\n     * @param value HTML format content\r\n     */\r\n    SetHtml(value: string): void {\r\n        return clipboard.writerHTML(value);\r\n    }\r\n    /**\r\n     * Get RTF format text from clipboard\r\n     */\r\n    GetRTF(): string {\r\n        return clipboard.readRTF();\r\n    }\r\n    /**\r\n     * Set RTF format content to clipboard\r\n     * @param value RTF format content\r\n     */\r\n    SetRTF(value: string): void {\r\n        clipboard.writerRTF(value);\r\n    }\r\n}","export class JsonToken {\r\n\r\n    Decode(token: string): any {\r\n        const parts = token.split('.');\r\n        if (parts.length !== 3) {\r\n            throw new Error('JWT must have 3 parts');\r\n        }\r\n        const decoded = this.urlBase64Decode(parts[1]);\r\n        if (!decoded) {\r\n            throw new Error('Cannot decode the token');\r\n        }\r\n        return JSON.parse(decoded);\r\n    }\r\n\r\n    private urlBase64Decode(str: string) {\r\n        let output = str.replace(/-/g, '+').replace(/_/g, '/');\r\n        switch (output.length % 4) {\r\n            case 0:\r\n                break;\r\n            case 2:\r\n                output += '==';\r\n                break;\r\n            case 3:\r\n                output += '=';\r\n                break;\r\n            default: {\r\n                throw new Error('Illegal base64url string!');\r\n            }\r\n        }\r\n        return decodeURIComponent(encodeURI(window.atob(output)));\r\n    }\r\n}","import { IEnumerable } from './IEnumerable';\r\n\r\nexport class EnumerableIterator<T> implements Iterator<T>{\r\n    private pointer = 0;\r\n\r\n    constructor(private enumerable: IEnumerable<T>) {\r\n\r\n    }\r\n\r\n    next(value?: any): IteratorResult<T> {       \r\n        if (this.pointer < this.enumerable.Count) {\r\n            return {\r\n                done: false,\r\n                value: this.enumerable.Items[this.pointer++]\r\n            };\r\n        } else {\r\n            return {\r\n                done: true,\r\n                value: null\r\n            };\r\n        }\r\n    }\r\n}","import { IEnumerable } from './IEnumerable';\r\nimport { EnumerableIterator } from './EnumerableIterator';\r\n\r\nexport class Enumerable<T> implements IEnumerable<T> {\r\n    private items: T[] = [];\r\n\r\n    /** Get counts of collection */\r\n    get Count(): number {\r\n        return this.Items.length;\r\n    }\r\n    /** Get all items */\r\n    get Items(): T[] {\r\n        return this.items;\r\n    }\r\n    /** Set items value */\r\n    set Items(value: T[]) {\r\n        this.items = value;\r\n    }\r\n\r\n    [Symbol.iterator]() {\r\n        return new EnumerableIterator(this);\r\n    }\r\n\r\n    static From<T>(array: Array<T>): IEnumerable<T> {\r\n        let list = new Enumerable<T>();\r\n        if (array) {\r\n            list.Items = array;\r\n        }\r\n        return list;\r\n    }\r\n}\r\n\r\n","import { Enumerable } from './Enumerable';\r\nimport { ICollection } from './ICollection';\r\n\r\nexport class Collection<T> extends Enumerable<T> implements ICollection<T> {  \r\n\r\n    /** Get whether collection is readonly */\r\n    get IsReadOnly(): boolean {\r\n        return false;\r\n    }\r\n\r\n    /** Add item to collection */\r\n    Add(item: T): void {\r\n        if (!item)\r\n            throw new Error(`Argument 'item' is null.`);\r\n\r\n        this.Items.push(item);\r\n    }\r\n    /** Add items to collection */\r\n    AddRange(items: T[]): void {\r\n        if (!items)\r\n            throw new Error(`Argument 'items' is null.`);\r\n\r\n        for (let item of items) {\r\n            this.Add(item);\r\n        }\r\n    }\r\n    /** Clear collection */\r\n    Clear(): void {\r\n        this.Items = [];\r\n    }\r\n    /** Determines whether collection contains a specific item */\r\n    Contains(item: T): boolean {\r\n        if (!item)\r\n            throw new Error(`Argument 'item' is null.`);\r\n\r\n        return this.Items.indexOf(item) > -1;\r\n    }\r\n    /** Remove item from collection */\r\n    Remove(item: T): boolean {\r\n        if (!item)\r\n            throw new Error(`Argument 'item' is null.`);\r\n\r\n        let index = this.Items.indexOf(item);\r\n        if (index > -1) {\r\n            this.Items.splice(index, 1);\r\n            return true;\r\n        } else {\r\n            return false;\r\n        }\r\n    }\r\n    /** Copy elements to an array starting at a particular index\r\n     * @array\r\n     * @arrayIndex The zero-based index in array at which copying begins.\r\n     */\r\n    CopyTo(array: T[], arrayIndex: number) {\r\n        if (!array)\r\n            throw new Error(`Argument 'array' is null.`);\r\n        if (arrayIndex < 0 || arrayIndex > array.length)\r\n            throw new Error(`Argument 'arrayIndex' is out of range.`);\r\n\r\n        let index = arrayIndex;\r\n        for (let item of this.Items) {\r\n            array.splice(index++, 0, item);\r\n        }\r\n\r\n    }\r\n}","import { Collection } from './Collection';\r\nimport { IList } from './IList';\r\n\r\nexport class List<T> extends Collection<T> implements IList<T> {\r\n    /** Get index of given item */\r\n    IndexOf(item: T): number {\r\n        if (!item)\r\n            throw new Error(`Argument 'item' is null.`);\r\n        return this.Items.indexOf(item);\r\n    }\r\n    /** Insert item to given index */\r\n    Insert(index: number, item: T): void {\r\n        if (!item)\r\n            throw new Error(`Argument 'item' is null.`);\r\n        if (index < 0 || index >= this.Items.length)\r\n            throw new Error(`Argument 'index' is out of index`);\r\n\r\n        this.Items.splice(index, 0, item);\r\n    }\r\n    /** Remove item at given index */\r\n    RemoveAt(index: number): void {\r\n        if (index < 0 || index >= this.Items.length)\r\n            throw new Error(`Argument 'index' is out of index`);\r\n            \r\n        this.Items.splice(index, 1);\r\n    }\r\n}","import { IEnumerable } from './IEnumerable';\r\nimport { Enumerable } from './Enumerable';\r\n\r\n\r\nexport interface IGrouping<TKey, TElement> extends IEnumerable<TElement> {\r\n    readonly Key: TKey;\r\n\r\n}\r\n\r\nexport class Grouping<TKey, TElement> extends Enumerable<TElement> implements IGrouping<TKey, TElement> {\r\n    private key: TKey;\r\n\r\n\r\n    constructor(key?: TKey, elements?: IEnumerable<TElement>) {\r\n        super();\r\n        this.key = key;\r\n        this.Items = elements.Items;\r\n    }\r\n\r\n    get Key(): TKey {\r\n        return this.key;\r\n    }\r\n    set Key(value: TKey) {\r\n        this.key = value;\r\n    }\r\n\r\n}","import { INamedDictionary } from './INamedDictionary';\r\n\r\n\r\nexport class NamedDictionary<T> implements INamedDictionary<T> {\r\n    private items: { [index: string]: T } = {};\r\n\r\n    private count = 0;\r\n\r\n    public ContainsKey(key: string): boolean {\r\n        return this.items.hasOwnProperty(key);\r\n    }\r\n\r\n    public Count(): number {\r\n        return this.count;\r\n    }\r\n\r\n    public Add(key: string, value: T) {\r\n        this.items[key] = value;\r\n        this.count++;\r\n    }\r\n\r\n    public Remove(key: string): T {\r\n        let value = this.items[key];\r\n        delete this.items[key];\r\n        this.count--;\r\n        return value;\r\n    }\r\n\r\n    public Item(key: string): T {\r\n        return this.items[key];\r\n    }\r\n\r\n    public Keys(): string[] {\r\n        let keySet: string[] = [];\r\n\r\n        for (let prop in this.items) {\r\n            if (this.items.hasOwnProperty(prop)) {\r\n                keySet.push(prop);\r\n            }\r\n        }\r\n\r\n        return keySet;\r\n    }\r\n\r\n    public Values(): T[] {\r\n        let values: T[] = [];\r\n\r\n        for (let prop in this.items) {\r\n            if (this.items.hasOwnProperty(prop)) {\r\n                values.push(this.items[prop]);\r\n            }\r\n        }\r\n\r\n        return values;\r\n    }\r\n}","export class KeyValuePair<TKey, TValue>{\r\n    private key: TKey;\r\n    private value: TValue;\r\n\r\n    constructor(key: TKey, value: TValue) {\r\n        this.key = key;\r\n        this.value = value;\r\n    }\r\n\r\n    get Key(): TKey {\r\n        return this.key;\r\n    }\r\n    get Value(): TValue {\r\n        return this.value;\r\n    }\r\n}","import { IDictionary } from './IDictionary';\r\nimport { Enumerable } from './Enumerable';\r\nimport { KeyValuePair } from './KeyValuePair';\r\n\r\nexport class Dictionary<TKey, TValue> extends Enumerable<KeyValuePair<TKey, TValue>> implements IDictionary<TKey, TValue> {\r\n    private map = new Map<TKey, TValue>();\r\n\r\n    Add(key: TKey, value: TValue): void {\r\n        this.map.set(key, value);\r\n        this.Items.Add(new KeyValuePair(key, value));\r\n    }\r\n    ContainsKey(key: TKey): boolean {\r\n        return this.map.has(key);\r\n    }\r\n    // Count(): number {\r\n    //     return this.items.size;\r\n    // }\r\n    Item(key: TKey): TValue {\r\n        return this.map.get(key);\r\n    }\r\n    Keys(): TKey[] {\r\n        let keys = [];\r\n\r\n        this.map.forEach((value, key) => {\r\n            keys.push(key);\r\n        })\r\n        return keys;\r\n    }\r\n    Remove(key: TKey): boolean {\r\n\r\n        let item = this.Items.FirstOrDefault(x => x.Key === key);\r\n        if (item)\r\n            this.Items.Remove(item);\r\n        return this.map.delete(key);\r\n    }\r\n    Values(): TValue[] {\r\n        let values = [];\r\n        this.map.forEach((value, key) => {\r\n            values.push(value);\r\n        })\r\n        return values;\r\n    }\r\n}","import { Observable } from 'rxjs/Observable';\r\nimport { Operator } from 'rxjs/Operator';\r\nimport { Subscriber } from 'rxjs/Subscriber';\r\nimport { Subscription, TeardownLogic } from 'rxjs/Subscription';\r\nimport { IScheduler, Scheduler } from 'rxjs/Scheduler';\r\nimport { List } from './List';\r\nimport { IEnumerable } from './IEnumerable';\r\nimport { EnumerableIterator } from './EnumerableIterator';\r\n\r\nexport class ObservableCollection<T> extends Observable<T> implements IEnumerable<T>  {\r\n\r\n\r\n    static Create<T>(array: Array<T>): ObservableCollection<T> {\r\n        return new ObservableCollection<T>(<any>[array]);\r\n    }\r\n\r\n    static dispatch(state: any) {\r\n\r\n        const { array, index, count, subscriber } = state;\r\n\r\n        if (index >= count) {\r\n            subscriber.complete();\r\n            return;\r\n        }\r\n\r\n        subscriber.next(array[index]);\r\n\r\n        if (subscriber.closed) {\r\n            return;\r\n        }\r\n\r\n        state.index = index + 1;\r\n\r\n        (<any>this).schedule(state);\r\n    }\r\n\r\n    // value used if Array has one value and _isScalar\r\n    private values: T[];\r\n\r\n\r\n    constructor(private array: any[], private scheduler?: IScheduler) {\r\n        super();\r\n        // console.log(array);\r\n        if (!scheduler && array.length === 1) {\r\n            this._isScalar = true;\r\n            this.values = <T[]>array[0];\r\n        } else {\r\n            this._isScalar = true;\r\n            this.values = array;\r\n        }\r\n    }\r\n\r\n    get Count(): number {\r\n        return this.values.length;\r\n    }\r\n    get Values(): T[] {\r\n        return this.values;\r\n    }\r\n    get Items(): T[] {\r\n        return this.values;\r\n    }\r\n    set Items(value: T[]) {\r\n        this.values = value;\r\n    }\r\n\r\n    public Add(item: T): void {\r\n        if (this.values) {\r\n            this.values.push(item);\r\n        }\r\n    }\r\n    public AddRange(items: T[]): void {\r\n        if (items) {\r\n            for (let item of items) {\r\n                this.Add(item);\r\n            }\r\n        }\r\n    }\r\n    public Remove(item: T): boolean {\r\n        let index = this.values.indexOf(item);\r\n        if (index > -1) {\r\n            this.values.splice(index, 1);\r\n        } else {\r\n            return false;\r\n        }\r\n\r\n    }\r\n    \r\n\r\n    [Symbol.iterator]() {\r\n        return new EnumerableIterator(this);\r\n    }\r\n\r\n    _subscribe(subscriber: Subscriber<T>): TeardownLogic {\r\n        let index = 0;\r\n        const array = this.array;\r\n        const count = array.length;\r\n        const scheduler = this.scheduler;\r\n\r\n        if (scheduler) {\r\n            return scheduler.schedule(ObservableCollection.dispatch, 0, {\r\n                array, index, count, subscriber\r\n            });\r\n        } else {\r\n            //console.log(this.values);\r\n            for (let i = 0; i < count && !subscriber.closed; i++) {\r\n                subscriber.next(array[0]);\r\n            }\r\n            subscriber.complete();\r\n        }\r\n    }\r\n}","import { IEnumerable } from './IEnumerable';\r\nimport { Enumerable } from './Enumerable';\r\nimport { List } from './List';\r\n\r\nimport { ObservableCollection } from './ObservableCollection';\r\nimport { IGrouping, Grouping } from './IGrouping';\r\nimport { Dictionary } from './Dictionary';\r\nimport { IList } from './IList';\r\nimport { IDictionary } from './IDictionary';\r\n\r\n/** Do ForEach on items */\r\nexport function ForEach<T>(this: IEnumerable<T>, action: (item: T) => void): void {\r\n    if (!action) {\r\n        throw new Error(`Argument 'item' is null.`);\r\n    }\r\n\r\n    for (let item of this.Items) {\r\n        action(item);\r\n    }\r\n}\r\n/** Sort items by given comparer */\r\nexport function Sort<T>(this: IEnumerable<T>, comparer: (x: T, y: T) => number): void {\r\n    if (!comparer)\r\n        throw new Error(`Argument 'comparer' is null.`);\r\n\r\n    this.Items = this.Items.sort(comparer);\r\n}\r\n/** Find items by given predicate */\r\nexport function FindAll<T>(this: IEnumerable<T>, predicate: (item: T) => boolean): IEnumerable<T> {\r\n    if (!predicate)\r\n        throw new Error(`Argument 'predicate' is null.`);\r\n\r\n    let result = new List<T>();\r\n    for (let item of this.Items) {\r\n        if (predicate(item))\r\n            result.Add(item);\r\n    }\r\n\r\n    return Enumerable.From(result.Items);\r\n}\r\n/** Find first item in the list */\r\nexport function FirstOrDefault<T>(this: IEnumerable<T>, predicate?: (item: T) => boolean): T {\r\n\r\n    let result: T;\r\n\r\n    result = this.Items.FirstOrDefault(predicate);\r\n\r\n    return result;\r\n}\r\nexport function IsEmpty<T>(this: IEnumerable<T>): boolean {\r\n    return !(this.Items && this.Items.length > 0);\r\n}\r\nexport function Any<T>(this: IEnumerable<T>, predicate?: (source: any) => boolean): boolean {\r\n    if (predicate) {\r\n        for (let item of this.Items) {\r\n            if (predicate(item))\r\n                return true;\r\n        }\r\n        return false;\r\n    } else {\r\n        if (this.Items.length === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n}\r\nexport function Max<T>(this: IEnumerable<T>, selector: (source: T) => number): number {\r\n\r\n    let max = this.Select(selector).Items.reduce(function (a: number, b: number) {\r\n        return Math.max(a, b);\r\n    });\r\n    return max;\r\n}\r\nexport function Min<T>(this: IEnumerable<T>, selector: (source: T) => any): number {\r\n    let min = this.Select(selector).Items.reduce(function (a: number, b: number) {\r\n        return Math.min(a, b);\r\n    });\r\n    return min;\r\n}\r\nexport function OrderBy<T>(this: IEnumerable<T>, keySelector: (source: T) => any): IEnumerable<T> {\r\n    // return Enumerable.From(this.Items.OrderBy(keySelector));\r\n    let values = this.Items.sort(function (a: any, b: any) {\r\n        return keySelector(a) - keySelector(b);\r\n    });\r\n\r\n    return Enumerable.From(values);\r\n}\r\nexport function OrderByDescending<T>(this: IEnumerable<T>, keySelector: (source: T) => any): IEnumerable<T> {\r\n    // return Enumerable.From(this.Items.OrderByDescending(keySelector));\r\n\r\n    let values = this.Items.sort(function (a: any, b: any) {\r\n        return keySelector(b) - keySelector(a);\r\n    });\r\n\r\n    return Enumerable.From(values);\r\n}\r\nexport function Where<T>(this: IEnumerable<T>, predicate: (source: T) => boolean): IEnumerable<T> {\r\n    //return Enumerable.From(this.Items.Where(predicate));\r\n\r\n    let values = this.Items.filter((x: any) => {\r\n        return predicate(x);\r\n    });\r\n    return  Enumerable.From(values);\r\n}\r\nexport function Select<TSource, TResult>(this: IEnumerable<TSource>, selector: (source: TSource) => TResult): IEnumerable<TResult> {\r\n    //return Enumerable.From<TResult>(this.Items.Select(selector));\r\n    let result = [];\r\n    for (let item of this.Items) {\r\n        result.push(selector(item));\r\n    }\r\n    return Enumerable.From(result);\r\n}\r\nexport function ElementAt<T>(this: IEnumerable<T>, index: number): T {\r\n    let values = this.Items;\r\n    return values[index];\r\n}\r\nexport function GroupBy<T, TKey, TElement>(this: IEnumerable<T>, keySelector: (source: T) => TKey, valueSelector?: (source: T) => any): IEnumerable<IGrouping<TKey, TElement>> {\r\n    if (!this)\r\n        throw new Error(`Parameter is null`);\r\n    if (!keySelector)\r\n        throw new Error(`Parameter 'keySelelctor'is null`);\r\n    if (!valueSelector)\r\n        valueSelector = x => x;\r\n\r\n    let dictionary = new Dictionary<TKey, IList<TElement>>();\r\n\r\n    this.ForEach(x => {\r\n        let key = keySelector(x);\r\n        let value = valueSelector ? valueSelector(x) : x;\r\n\r\n        let values: IList<TElement>;\r\n        if (dictionary.ContainsKey(key)) {\r\n            let item = dictionary.Item(key);\r\n            values = item ? item : new List<TElement>();\r\n        } else {\r\n            values = new List<TElement>();\r\n            dictionary.Add(key, values);\r\n        }\r\n        values.Add(value);\r\n    });\r\n\r\n    let groups = new List<IGrouping<TKey, TElement>>();\r\n\r\n    dictionary.ForEach(x => {\r\n        groups.Add(new Grouping(x.Key, x.Value));\r\n    })\r\n    return groups;\r\n}\r\n\r\ndeclare module './Enumerable' {\r\n    interface Enumerable<T> {\r\n        ForEach: (action: (item: T) => void) => void;\r\n        Sort: (comparer: (x: T, y: T) => number) => void;\r\n        FindAll: (predicate: (item: T) => boolean) => IEnumerable<T>;\r\n        FirstOrDefault: (predicate?: (item: T) => boolean) => T;\r\n        IsEmpty: () => boolean;\r\n        Any: (predicate?: (source: any) => boolean) => boolean;\r\n        Max: (selector: (source: T) => any) => number;\r\n        Min: (selector: (source: T) => any) => number;\r\n        OrderBy: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        OrderByDescending: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        Where: (predicate: (source: T) => boolean) => IEnumerable<T>;\r\n        Select: <T, TResult>(selector: (source: T) => TResult) => IEnumerable<TResult>;\r\n        ElementAt: (index: number) => T;\r\n        GroupBy: <TKey, TElement>  (keySelector: (source: T) => TKey, valueSelector?: (source: T) => TElement) => IEnumerable<IGrouping<TKey, TElement>>;\r\n    }\r\n}\r\ndeclare module './IEnumerable' {\r\n    interface IEnumerable<T> {\r\n        ForEach: (action: (item: T) => void) => void;\r\n        Sort: (comparer: (x: T, y: T) => number) => void;\r\n        FindAll: (predicate: (item: T) => boolean) => IEnumerable<T>;\r\n        FirstOrDefault: (predicate?: (item: T) => boolean) => T;\r\n        IsEmpty: () => boolean;\r\n        Any: (predicate?: (source: any) => boolean) => boolean;\r\n        Max: (selector: (source: T) => any) => number;\r\n        Min: (selector: (source: T) => any) => number;\r\n        OrderBy: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        OrderByDescending: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        Where: (predicate: (source: T) => boolean) => IEnumerable<T>;\r\n        Select: <T, TResult>(selector: (source: T) => TResult) => IEnumerable<TResult>;\r\n        ElementAt: (index: number) => T;\r\n        GroupBy: <TKey, TElement>  (keySelector: (source: T) => TKey, valueSelector?: (source: T) => TElement) => IEnumerable<IGrouping<TKey, TElement>>;\r\n    }\r\n}\r\ndeclare module './ObservableCollection' {\r\n    interface ObservableCollection<T> {\r\n        ForEach: (action: (item: T) => void) => void;\r\n        Sort: (comparer: (x: T, y: T) => number) => void;\r\n        FindAll: (predicate: (item: T) => boolean) => IEnumerable<T>;\r\n        FirstOrDefault: (predicate?: (item: T) => boolean) => T;\r\n        IsEmpty: () => boolean;\r\n        Any: (predicate?: (source: any) => boolean) => boolean;\r\n        Max: (selector: (source: T) => any) => number;\r\n        Min: (selector: (source: T) => any) => number;\r\n        OrderBy: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        OrderByDescending: (keySelector: (source: T) => any) => IEnumerable<T>;\r\n        Where: (predicate: (source: T) => boolean) => IEnumerable<T>;\r\n        Select: <T, TResult>(selector: (source: T) => TResult) => IEnumerable<TResult>;\r\n        ElementAt: (index: number) => T;\r\n        GroupBy: <TKey, TElement>  (keySelector: (source: T) => TKey, valueSelector?: (source: T) => TElement) => IEnumerable<IGrouping<TKey, TElement>>;\r\n    }\r\n}\r\n\r\nEnumerable.prototype.ForEach = ForEach;\r\nEnumerable.prototype.Sort = Sort;\r\nEnumerable.prototype.FindAll = FindAll;\r\nEnumerable.prototype.FirstOrDefault = FirstOrDefault;\r\nEnumerable.prototype.IsEmpty = IsEmpty;\r\nEnumerable.prototype.Any = Any;\r\nEnumerable.prototype.Max = Max;\r\nEnumerable.prototype.Min = Min;\r\nEnumerable.prototype.OrderBy = OrderBy;\r\nEnumerable.prototype.OrderByDescending = OrderByDescending;\r\nEnumerable.prototype.Where = Where;\r\nEnumerable.prototype.Select = Select;\r\nEnumerable.prototype.ElementAt = ElementAt;\r\nEnumerable.prototype.GroupBy = GroupBy;\r\n\r\nObservableCollection.prototype.ForEach = ForEach;\r\nObservableCollection.prototype.Sort = Sort;\r\nObservableCollection.prototype.FindAll = FindAll;\r\nObservableCollection.prototype.FirstOrDefault = FirstOrDefault;\r\nObservableCollection.prototype.IsEmpty = IsEmpty;\r\nObservableCollection.prototype.Any = Any;\r\nObservableCollection.prototype.Max = Max;\r\nObservableCollection.prototype.Min = Min;\r\nObservableCollection.prototype.OrderBy = OrderBy;\r\nObservableCollection.prototype.OrderByDescending = OrderByDescending;\r\nObservableCollection.prototype.Where = Where;\r\nObservableCollection.prototype.Select = Select;\r\nObservableCollection.prototype.ElementAt = ElementAt;\r\nObservableCollection.prototype.GroupBy = GroupBy;","import { IDictionary, Dictionary,  } from '../collections/index';\r\nimport { InjectionToken } from '@angular/core';\r\n\r\nexport interface ISize {\r\n    Width: number;\r\n    Height: number;\r\n}\r\nexport interface ISizChangeHandler {\r\n    Handle(size: ISize): void;\r\n}\r\nexport interface IWindowSizeWatcher {\r\n    Start(): void;\r\n    Add(name: string, handler: ISizChangeHandler);\r\n    Remove(name: string);\r\n}\r\nexport const WindowSizeWatcherToken = new InjectionToken('./IWindowSizeWatcher');\r\n\r\nexport class WindowSizeWatcher implements IWindowSizeWatcher {\r\n    private handlers: IDictionary<string, ISizChangeHandler>;\r\n\r\n\r\n    constructor() {\r\n        this.handlers = new Dictionary<string, ISizChangeHandler>();\r\n    }\r\n\r\n    Start(): void {\r\n\r\n        let self = this;\r\n        window.onresize = (e: UIEvent) => {\r\n            for (let handler of self.handlers.Values()) {\r\n                handler.Handle({ Width: window.innerWidth, Height: window.innerHeight });\r\n            }\r\n        };\r\n    }\r\n\r\n    Add(name: string, handler: ISizChangeHandler): void {\r\n        this.handlers.Add(name, handler);\r\n    }\r\n    Remove(name: string) {\r\n        this.handlers.Remove(name);\r\n    }\r\n\r\n    private OnSizeChanged(e: UIEvent) {\r\n\r\n        for (let handler of this.handlers.Values()) {\r\n            handler.Handle({ Width: window.innerWidth, Height: window.innerHeight });\r\n        }\r\n    }\r\n}\r\n","import { XElement } from './XElement';\r\nimport * as Common from '../common/index';\r\n\r\nexport class XDocument {\r\n\r\n    private mRoot: XElement;\r\n\r\n    get Root(): XElement {\r\n        return this.mRoot;\r\n    }\r\n    set Root(value:XElement){\r\n        this.mRoot = value;\r\n        this.mRoot.Document = this;\r\n    }\r\n\r\n    Build(): XMLDocument {        \r\n        var doc = document.implementation.createDocument(\"\", \"\", null);\r\n\r\n        doc.appendChild(this.Root.ToXmlElement(doc));\r\n        return doc;\r\n    }\r\n\r\n    BuildXmlString():string{\r\n        let builder = new Common.StringBuilder();\r\n        let content = this.Root.ToXmlString(builder);\r\n\r\n        return content;\r\n    }\r\n}","\r\nimport {XObject}        from './XObject';\r\n\r\nexport class XAttribute extends XObject {\r\n    constructor(name: string, value: any) {\r\n        super(name, value);\r\n    }\r\n}","\r\nexport interface ICommand {\r\n\r\n    CanExecute(param: any): boolean;\r\n\r\n    Execute(param: any): void;\r\n}\r\n\r\nexport class DelegateCommand implements ICommand {\r\n\r\n    constructor(\r\n        private canExecute: (param: any) => boolean,\r\n        private action: (param: any) => void) {\r\n\r\n    }\r\n\r\n    CanExecute(param: any): boolean {\r\n        if (this.canExecute === null)\r\n            return true;\r\n        return  this.canExecute(param);\r\n    }\r\n\r\n    Execute(param: any): void {\r\n        if (this.action) {\r\n            try {\r\n                this.action(param);\r\n            } catch (error) {\r\n                throw error;\r\n            }\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create a command from given actions.\r\n     * @param action executed action\r\n     * @param canExecute can execue action\r\n     */\r\n    static From(action: (param?: any) => void, canExecute?: (param?: any) => boolean): ICommand {\r\n        if (!canExecute)\r\n            canExecute = (param?: any) => true;\r\n        return new DelegateCommand(canExecute, action);\r\n    }\r\n}","import { ICommandRepository } from './ICommandRepository';\r\nimport { ICommand } from './ICommand';\r\nimport { Dictionary } from '../collections/Dictionary';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CommandRepository implements ICommandRepository {\r\n\r\n    Commands = new Dictionary<string, ICommand>();\r\n\r\n    GetCommand(name: string): ICommand {\r\n\r\n        let command = this.Commands.Item(name);\r\n\r\n        return command;\r\n    }\r\n\r\n    Register(name: string, command: ICommand): ICommandRepository {\r\n        if (!name)\r\n            throw new Error('Name value is null.');\r\n        if (!command)\r\n            throw new Error('Command value is null.')\r\n\r\n        this.Commands.Add(name, command);\r\n\r\n        return this;\r\n    }\r\n}","import { InjectionToken } from '@angular/core';\r\n\r\n\r\n\r\nexport const MessageMediatorToken = new InjectionToken('./message-mediator/IMessageMediator');\r\nexport const LoggerFactoryToken = new InjectionToken('./logging/ILoggerFactory');\r\nexport const ExceptionHandlerToken = new InjectionToken('./exception/IExceptionHandler');\r\nexport const CommandRepositoryToken = new InjectionToken('./command/ICommandRepository');\r\nexport const CommandDescriptorRepositoryToken = new InjectionToken('./command/ICommandDescriptorRepository');\r\nexport const ActionRepositoryToken = new InjectionToken('./action/IActionRepository');\r\n","import { Directive, ElementRef, Input, Renderer, HostListener, Inject } from '@angular/core';\r\n\r\nimport { ICommandRepository } from './ICommandRepository';\r\nimport { ILoggerFactory } from '../logging/ILoggerFactory';\r\nimport { ILogger } from '../logging/ILogger';\r\nimport { CommandRepositoryToken, LoggerFactoryToken } from '../Tokens';\r\n\r\n@Directive({\r\n    selector: '[InvokeCommand]'\r\n})\r\nexport class InvokeCommandDirective {\r\n    @Input('InvokeCommand') CommandName: string;\r\n    @Input() CommandParam: any;\r\n\r\n    private logger: ILogger;\r\n\r\n    constructor(\r\n        @Inject(CommandRepositoryToken) private commandRepository: ICommandRepository,\r\n        @Inject(LoggerFactoryToken) loggerFactory: ILoggerFactory) {\r\n\r\n        this.logger = loggerFactory.CreateLogger('InvokeCommand');\r\n    }\r\n\r\n    @HostListener('click', ['$event'])\r\n    OnClicked() {\r\n        this.logger.Debug(`Invoke command: ${this.CommandName} with ${JSON.stringify(this.CommandParam)}`);\r\n\r\n        if (String.IsValid(this.CommandName)) {\r\n            let command = this.commandRepository.GetCommand(this.CommandName);\r\n            \r\n            if (command != null && command.CanExecute(this.CommandParam)) {\r\n                this.logger.Debug(`Get command with name: ${this.CommandName}, ${JSON.stringify(command)}`);\r\n                command.Execute(this.CommandParam);\r\n            }\r\n        }\r\n    }\r\n}","import { ICommandDescriptor } from './ICommandDescriptor';\r\n\r\nexport class CommandDescriptor implements ICommandDescriptor {\r\n\r\n    constructor(public Header: string, public CommandName: string,\r\n        public Group?: string, public Icon?: string,\r\n        public Image?: string, public Description?: string,\r\n        public Id?: string, public Tag?: any, public Shortcut?: string) {\r\n\r\n    }\r\n}","import { ICommandDescriptorRepository } from './ICommandDescriptorRepository';\r\nimport { IEnumerable } from '../collections/IEnumerable';\r\nimport { ICommandDescriptor } from './ICommandDescriptor';\r\nimport { List } from '../collections/List';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class CommandDescriptorRepository implements ICommandDescriptorRepository {\r\n    private descriptors = new List<ICommandDescriptor>();\r\n\r\n\r\n    get Descriptors(): IEnumerable<ICommandDescriptor> {\r\n        return this.descriptors;\r\n    }\r\n    /**\r\n     * Register a descriptor.\r\n     */\r\n    Register(descriptor: ICommandDescriptor): ICommandDescriptorRepository {\r\n        if (descriptor != null) {\r\n            this.descriptors.Add(descriptor);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n    * Remove a descriptor\r\n    */\r\n    Remove(descriptor: ICommandDescriptor): ICommandDescriptorRepository {\r\n        if (descriptor !== null)\r\n            this.descriptors.Remove(descriptor);\r\n        return this;\r\n    }\r\n    /**\r\n     * Remove descriptors by given expression\r\n     */\r\n    RemoveRange(expression: (item: ICommandDescriptor) => boolean): void {\r\n        if (expression === null) {\r\n            return;\r\n        }\r\n\r\n        this.Descriptors.FindAll(expression)\r\n            .ForEach(x => {\r\n                this.descriptors.Remove(x);\r\n            });\r\n    }\r\n}","import { IEnumerable } from '../collections/IEnumerable';\r\nimport { ICommandDescriptor } from './ICommandDescriptor';\r\nimport { ICommandDescriptorRepository } from './ICommandDescriptorRepository';\r\nimport { CommandDescriptorRepository } from './CommandDescriptorRepository';\r\nimport * as Collections from '../collections/index';\r\n\r\nexport class CommandDescriptorExtensions {\r\n    /**\r\n     * Get descriptors by group\r\n     * @param this command descriptor repository\r\n     * @param group group name\r\n     */\r\n    static GetDescriptorsByGroup(this: ICommandDescriptorRepository, group: string): IEnumerable<ICommandDescriptor> {\r\n        let repo = this;\r\n        return repo.Descriptors.Where((x) => { return x.Group === group; });\r\n    }\r\n}\r\n\r\ndeclare module './ICommandDescriptorRepository' {\r\n    interface ICommandDescriptorRepository {\r\n        /**\r\n         * Get descriptors by group\r\n         * @param this command descriptor repository\r\n         * @param group group name\r\n         */\r\n        GetDescriptorsByGroup: (group: string) => IEnumerable<ICommandDescriptor>;\r\n    }\r\n}\r\ndeclare module './CommandDescriptorRepository' {\r\n    interface CommandDescriptorRepository {\r\n        /**\r\n         * Get descriptors by group\r\n         * @param this command descriptor repository\r\n         * @param group group name\r\n         */\r\n        GetDescriptorsByGroup: (group: string) => IEnumerable<ICommandDescriptor>;\r\n    }\r\n}\r\n\r\n\r\nCommandDescriptorRepository.prototype.GetDescriptorsByGroup = CommandDescriptorExtensions.GetDescriptorsByGroup;","\r\nexport class AppSettingItem {\r\n    Id: string;\r\n    Name: string;\r\n    Value: any;\r\n\r\n    get ToString(): string {\r\n        return `AppSettingItem Name:'${this.Name}', Id:'${this.Id}', Value:'${this.Value}'`;\r\n    }\r\n}","import { AppSettingItem } from './AppSettingItem';\r\nimport * as Common from '../common/index';\r\nimport * as Collections from '../collections/index';\r\n\r\nexport class AppSettings {\r\n    private Items = new Collections.NamedDictionary<AppSettingItem>();\r\n\r\n    get SettingItems(): AppSettingItem[] {\r\n        return this.Items.Values();\r\n    }\r\n\r\n    /** Get a setting item by name. */\r\n    GetItem(name: string, defaultValue?: any): AppSettingItem {\r\n        if (!name)\r\n            throw new Error('Given name is null.');\r\n\r\n        let item = this.Items.Item(name);\r\n        if (!item && defaultValue != null) {\r\n            item = new AppSettingItem();\r\n            item.Name = name;\r\n            item.Value = defaultValue;\r\n            this.Items.Add(name, item);\r\n        }\r\n        return item;\r\n    }\r\n    /** \r\n     * Add a setting item, if there is an item with same name, that item will\r\n     * be updated.\r\n     */\r\n    AddItem(item: AppSettingItem): AppSettings {\r\n        if (item && item.Name) {\r\n            let existing = this.GetItem(item.Name);\r\n            if (existing) {\r\n                existing.Value = item.Value;\r\n            } else {\r\n                this.Items.Add(item.Name, item);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /** \r\n     * Set setting item value \r\n     */\r\n    SetValue(name: string, value: any): AppSettings {\r\n        let item = this.GetItem(name);\r\n        if (!item) {\r\n            item = new AppSettingItem();\r\n            item.Name = name;            \r\n            this.Items.Add(name, item);\r\n        }\r\n        item.Value = value;\r\n        return this;\r\n    }\r\n}","import { Injectable,  InjectionToken } from '@angular/core';\r\nimport { IOptionDescriptor } from './IOptionDescriptor';\r\nimport * as Collections from '../collections/index';\r\n\r\n\r\nexport const OptionRepositoryToken = new InjectionToken('./IOptionRepository');\r\n\r\nexport interface IOptionRepository {\r\n    /**\r\n     * Register a descriptor\r\n     */\r\n    Register(descriptor: IOptionDescriptor): IOptionRepository;\r\n    /**\r\n     * Find descriptors by given expression\r\n     */\r\n    Find(expression: (descriptor: IOptionDescriptor) => boolean): Collections.IEnumerable<IOptionDescriptor>;\r\n    /**\r\n     * Find a descriptor by id\r\n     */\r\n    FindOne(id: string): IOptionDescriptor;\r\n}\r\n\r\n@Injectable()\r\nexport class OptionRepository implements IOptionRepository {\r\n    private descriptors = new Collections.Dictionary<string, IOptionDescriptor>();\r\n\r\n    /**\r\n     * Register a descriptor\r\n     */\r\n    Register(descriptor: IOptionDescriptor): IOptionRepository {\r\n        if (!descriptor)\r\n            throw new Error(`Argument descriptor is null`);\r\n\r\n        if (!this.descriptors.ContainsKey(descriptor.Id)) {\r\n            this.descriptors.Add(descriptor.Id, descriptor);\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Find descriptors by given expression\r\n     */\r\n    Find(expression: (descriptor: IOptionDescriptor) => boolean): Collections.IEnumerable<IOptionDescriptor> {\r\n        return Collections.Enumerable.From(this.descriptors.Values().Where(x => expression(x)));\r\n    }\r\n    /**\r\n     * Find a descriptor by id\r\n     */\r\n    FindOne(id: string): IOptionDescriptor {\r\n        if (this.descriptors.ContainsKey(id)) {\r\n            return this.descriptors.Item(id);\r\n        } else {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n\r\n","\r\nimport * as Collections from '../collections/index';\r\n\r\nexport class ResourceDictionary {\r\n    Local: string;\r\n    private mInnerDictionary = new Collections.NamedDictionary<string>();\r\n\r\n    /** Add resource value */\r\n    Add(key: string, value: string): ResourceDictionary {\r\n        if (key) {\r\n            this.mInnerDictionary.Add(key, value);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** Get resource value */\r\n    Get(key: string): string {\r\n        if (key) {\r\n            return this.mInnerDictionary.Item(key);\r\n        }\r\n\r\n        return '';\r\n    }\r\n}","import * as Common from '../common/index';\r\nimport * as Collections from '../collections/index';\r\nimport { ResourceDictionary } from './ResourceDictionary';\r\n\r\nexport class ResourceHolder {\r\n    DefaultLocal = 'en-US';\r\n    private mInnerDictionary = new Collections.NamedDictionary<ResourceDictionary>();\r\n\r\n    constructor() {\r\n        \r\n    }\r\n\r\n    /** Get resource dictionary by local name */\r\n    GetResources(local: string): ResourceDictionary {\r\n        return this.mInnerDictionary.Item(local);\r\n    }\r\n    /** Add resource for specific local */\r\n    AddResources(local: string, resource: ResourceDictionary): ResourceHolder {\r\n        if (local) {\r\n            this.mInnerDictionary.Add(local, resource);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    /** Get resource string */\r\n    GetString(name: string, local?: string): string {\r\n        let culture = local ? local : this.DefaultLocal;\r\n        let resources = this.GetResources(culture);\r\n        if (resources) {\r\n            return resources.Get(name);\r\n        }\r\n        return '';\r\n    }\r\n}","\r\nexport enum LogLevel {\r\n    /// <summary>\r\n    /// Logs that contain the most detailed messages. These messages may contain sensitive application data.\r\n    /// These messages are disabled by default and should never be enabled in a production environment.\r\n    /// </summary>\r\n    Trace = 1,\r\n\r\n    /// <summary>\r\n    /// Logs that are used for interactive investigation during development.  These logs should primarily contain\r\n    /// information useful for debugging and have no long-term value.\r\n    /// </summary>\r\n    Debug = 2,\r\n\r\n    /// <summary>\r\n    /// Logs that track the general flow of the application. These logs should have long-term value.\r\n    /// </summary>\r\n    Information = 3,\r\n\r\n    /// <summary>\r\n    /// Logs that highlight an abnormal or unexpected event in the application flow, but do not otherwise cause the\r\n    /// application execution to stop.\r\n    /// </summary>\r\n    Warning = 4,\r\n\r\n    /// <summary>\r\n    /// Logs that highlight when the current flow of execution is stopped due to a failure. These should indicate a\r\n    /// failure in the current activity, not an application-wide failure.\r\n    /// </summary>\r\n    Error = 5,\r\n\r\n    /// <summary>\r\n    /// Logs that describe an unrecoverable application or system crash, or a catastrophic failure that requires\r\n    /// immediate attention.\r\n    /// </summary>\r\n    Critical = 6,\r\n\r\n    /// <summary>\r\n    /// Not used for writing log messages. Specifies that a logging category should not write any messages.\r\n    /// </summary>\r\n    None = 9999\r\n}","import { ILogger } from './ILogger';\r\nimport { DefaultLoggerFactory } from './DefaultLoggerFactory';\r\nimport { LogLevel } from './LogLevel';\r\nimport * as Collections from '../collections/index';\r\nimport { ILoggerProvider } from './ILoggerProvider';\r\n\r\nexport class Logger implements ILogger {\r\n    private loggers = new Collections.List<ILogger>();\r\n    private formatter: (any, Error) => string = this.MessageFormatter;\r\n\r\n    constructor(private loggerFactory: DefaultLoggerFactory, private name: string) {\r\n\r\n        let providers = loggerFactory.GetProviders();\r\n        if (providers.Count > 0) {\r\n            providers.ForEach(x => {\r\n                this.loggers.Add(x.CreateLogger(name));\r\n            });\r\n        }\r\n    }\r\n\r\n    /** Aggregates most logging patterns to a single method. */\r\n    Log(level: LogLevel, eventId: number, state: any, error: Error, formatter: (any, Error) => string) {\r\n\r\n        let errors = new Collections.List<Error>();\r\n\r\n        this.loggers.ForEach(logger => {\r\n            try {\r\n                logger.Log(level, eventId, state, error, formatter);\r\n            } catch (error) {\r\n                errors.Add(error);\r\n            }\r\n        });\r\n\r\n        if (errors.Count > 0) {\r\n            throw new Error();             \r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the given LogLevel is enabled.\r\n     */\r\n    IsEnabled(level: LogLevel): boolean {\r\n        for (let logger of this.loggers.Items) {\r\n            if (logger.IsEnabled(level))\r\n                return true;\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    /** Log to Debug level */\r\n    Debug(message: any): ILogger {\r\n        this.Log(LogLevel.Debug, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Trace level */\r\n    Trace(message: any): ILogger {\r\n        this.Log(LogLevel.Trace, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Info level */\r\n    Info(message: any): ILogger {\r\n        this.Log(LogLevel.Information, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Warn level */\r\n    Warn(message: any): ILogger {\r\n        this.Log(LogLevel.Warning, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Error level */\r\n    Error(message: any): ILogger {\r\n        this.Log(LogLevel.Error, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Fatal level */\r\n    Fatal(message: any): ILogger {\r\n        this.Log(LogLevel.Critical, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n\r\n    /**\r\n     * Add a logger provider\r\n     * @provider\r\n     */\r\n    AddProvider(provider: ILoggerProvider): void {\r\n        let logger = provider.CreateLogger(this.name);\r\n\r\n        this.loggers.Add(logger);\r\n    }\r\n\r\n    private MessageFormatter(state: any, error: Error): string {\r\n        if (!state && !error)\r\n            // throw new Error(`No message or exception details wer found to create a message for the log.`);\r\n            return '';\r\n\r\n        if (!state)\r\n            return error.message;\r\n\r\n        if (!error)\r\n            return state.toString();\r\n\r\n        return `${state}\\n${error}`;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { ILoggerFactory } from './ILoggerFactory';\r\nimport { ILogger } from './ILogger';\r\nimport { ILoggerProvider } from './ILoggerProvider';\r\nimport { Logger } from './Logger';\r\n\r\nimport * as Collections from '../collections/index';\r\n\r\n@Injectable()\r\nexport class DefaultLoggerFactory implements ILoggerFactory {\r\n\r\n    private providers = new Collections.List<ILoggerProvider>();\r\n    private loggers = new Collections.Dictionary<string, Logger>();\r\n\r\n    constructor() { }\r\n\r\n    /** Create a logger */\r\n    CreateLogger(name: string): ILogger {\r\n        let logger = this.loggers.Item(name);\r\n\r\n        if (!logger) {\r\n            logger = new Logger(this, name);\r\n            this.loggers.Add(name, logger);\r\n        }\r\n\r\n        return logger;\r\n    }\r\n\r\n    /** \r\n     * Add an logger provider to the logging system\r\n     * @provider logger provider\r\n     */\r\n    AddProvider(provider: ILoggerProvider): void {\r\n        this.providers.Add(provider);\r\n\r\n        for (let item of this.loggers.Items) {\r\n            item.Value.AddProvider(provider);\r\n        }\r\n    }\r\n    /**\r\n     * Get logger providers\r\n     */\r\n    GetProviders(): Collections.IList<ILoggerProvider> {\r\n        return this.providers;\r\n    }\r\n}","import { ILogger } from './ILogger';\r\nimport { LogLevel } from './LogLevel';\r\n\r\nexport abstract class LoggerBase implements ILogger {\r\n    private name: string;\r\n    protected formatter: (any, Error) => string = this.MessageFormatter;\r\n\r\n    constructor() {\r\n\r\n    }\r\n\r\n    /** Aggregates most logging patterns to a single method. */\r\n    abstract Log(level: LogLevel, eventId: number, state: any, error: Error, formatter: (any, Error) => string);\r\n\r\n    protected get Name(): string {\r\n        return this.name;\r\n\r\n    }\r\n    protected set Name(value: string) {\r\n        this.name = value;\r\n    }\r\n    /**\r\n     * Checks if the given LogLevel is enabled.\r\n     */\r\n    IsEnabled(level: LogLevel): boolean {\r\n        return true;\r\n    }\r\n\r\n    /** Log to Debug level */\r\n    Debug(message: any): ILogger {\r\n        this.Log(LogLevel.Debug, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Trace level */\r\n    Trace(message: any): ILogger {\r\n        this.Log(LogLevel.Trace, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Info level */\r\n    Info(message: any): ILogger {\r\n        this.Log(LogLevel.Information, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Warn level */\r\n    Warn(message: any): ILogger {\r\n        this.Log(LogLevel.Warning, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Error level */\r\n    Error(message: any): ILogger {\r\n        this.Log(LogLevel.Error, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n    /** Log to Fatal level */\r\n    Fatal(message: any): ILogger {\r\n        this.Log(LogLevel.Critical, 0, message, null, this.formatter);\r\n        return this;\r\n    }\r\n\r\n    protected MessageFormatter(state: any, error: Error): string {\r\n        if (!state && !error)\r\n            // throw new Error(`No message or exception details wer found to create a message for the log.`);\r\n            return '';\r\n\r\n        if (!state)\r\n            return error.message;\r\n\r\n        if (!error)\r\n            return JSON.stringify(state); // state.toString();\r\n\r\n        return `${state}\\n${error}`;\r\n    }\r\n}","\r\nimport { LoggerBase } from '../LoggerBase';\r\nimport { LogLevel } from '../LogLevel';\r\n\r\nexport class DebugLogger extends LoggerBase {\r\n\r\n    constructor(name: string, private filter: (message: string, levle: LogLevel) => boolean) {\r\n        super();\r\n        this.Name = name;\r\n    }\r\n\r\n    /**\r\n     * Peform log output to console\r\n     * @param level \r\n     * @param eventId \r\n     * @param state \r\n     * @param error \r\n     * @param formatter \r\n     */\r\n    Log(level: LogLevel, eventId: number, state: any, error: Error, formatter: (any, Error) => string) {\r\n        console.log(`[${new Date().toLocaleTimeString()}] ${this.Name}: ${level}, ${this.formatter(state, error)}`);\r\n    }\r\n}","import { ILoggerProvider } from '../ILoggerProvider';\r\nimport { ILogger } from '../ILogger';\r\nimport { DebugLogger } from './DebugLogger';\r\nimport { LogLevel } from '../LogLevel';\r\n\r\nexport class DebugLoggerProvider implements ILoggerProvider {\r\n\r\n    constructor(private filter?: (message: string, level: LogLevel) => boolean) {\r\n        if (filter == null) {\r\n            filter = (message: string, level: LogLevel) => {\r\n                return true;\r\n            };\r\n        }\r\n    }\r\n\r\n    CreateLogger(name: string): ILogger {\r\n        return new DebugLogger(name, this.filter);\r\n    }\r\n\r\n    Dispose(): void {\r\n\r\n    }\r\n}","import { ILogger } from '../ILogger';\r\nimport { LogLevel } from '../LogLevel';\r\nimport * as Collections from '../../collections/index';\r\nimport { ILoggerProvider } from '../ILoggerProvider';\r\nimport { LoggerBase } from '../LoggerBase';\r\n\r\n\r\nexport class Log4JsLogger extends LoggerBase {\r\n\r\n    constructor(name: string, private log4JsLogger: any) {\r\n        super();\r\n        this.Name = name;\r\n    }\r\n\r\n    /** Aggregates most logging patterns to a single method. */\r\n    Log(level: LogLevel, eventId: number, state: any, error: Error, formatter: (any, Error) => string) {\r\n        let message = this.formatter(state, error);\r\n\r\n        switch (level) {\r\n            case LogLevel.Debug:\r\n                this.log4JsLogger.debug(message);\r\n                break;\r\n            case LogLevel.Trace:\r\n                this.log4JsLogger.trace(message);\r\n                break;\r\n            case LogLevel.Information:\r\n                this.log4JsLogger.info(message);\r\n                break;\r\n            case LogLevel.Warning:\r\n                this.log4JsLogger.warn(message);\r\n                break;\r\n            case LogLevel.Error:\r\n                this.log4JsLogger.error(message);\r\n                break;\r\n            case LogLevel.Critical:\r\n                this.log4JsLogger.fatal(message);\r\n                break;\r\n            default:\r\n                this.log4JsLogger.debug(message);\r\n                break;\r\n        }\r\n\r\n    }\r\n    /**\r\n    * Checks if the given LogLevel is enabled.\r\n    */\r\n    IsEnabled(level: LogLevel): boolean {\r\n        let rawLevel: any;\r\n        switch (level) {\r\n            case LogLevel.Debug:\r\n                rawLevel = { level: 5000, levelStr: 'TRACE' };\r\n                break;\r\n            case LogLevel.Trace:\r\n                rawLevel = { level: 10000, levelStr: 'DEBUG' };\r\n                break;\r\n            case LogLevel.Information:\r\n                rawLevel = { level: 20000, levelStr: 'INFO' };\r\n                break;\r\n            case LogLevel.Warning:\r\n                rawLevel = { level: 30000, levelStr: 'WARN' };\r\n                break;\r\n            case LogLevel.Error:\r\n                rawLevel = { level: 40000, levelStr: 'ERROR' };\r\n                break;\r\n            case LogLevel.Critical:\r\n                rawLevel = { level: 50000, levelStr: 'FATAL' };\r\n                break;\r\n            default:\r\n                rawLevel = { level: 10000, levelStr: 'DEBUG' };\r\n                break;\r\n        }\r\n        return this.log4JsLogger.isLevelEnabled(rawLevel);\r\n    }\r\n}","declare var fs: any;\r\n//import * as fs from 'fs';\r\n/**\r\n * Angular CLI doesn't support import node module right now, have to use\r\n * declare \r\n * https://github.com/angular/angular-cli/issues/3482\r\n */\r\n\r\nexport class File {\r\n    /**\r\n     * Check whether given file is exist.\r\n     * @param filename full file name with path\r\n     */\r\n    static Exists(filename: string): boolean {\r\n        let existed: boolean;\r\n        try {            \r\n            existed = fs.existsSync(filename);\r\n        } catch (error) {\r\n            console.log(error);\r\n            existed = false;\r\n        }\r\n        return existed;\r\n    }\r\n\r\n    static Create(filename: string, content: string): void {\r\n        try {\r\n            fs.writeFileSync(filename, content);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    static Delete(filename: string): void {\r\n        try {\r\n            fs.unlinkSync(filename);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    static ReadAllText(filename: string, encoding: string): string {\r\n        let content: string;\r\n        try {\r\n            content = fs.readFileSync(filename, encoding);\r\n        } catch (error) {\r\n            console.log(error);\r\n            content = undefined;\r\n        }\r\n        return content;\r\n    }\r\n\r\n    static Copy(source: string, target: string, overwrite: boolean): void {\r\n        try {\r\n            let goodToWrite = false;\r\n            let sourceStream = fs.createReadStream(source);\r\n            if (this.Exists(target)) {\r\n                if (overwrite) {\r\n                    fs.unlinkSync(target);\r\n                    goodToWrite = true;\r\n                }\r\n            } else {\r\n                goodToWrite = true;\r\n            }\r\n\r\n            if (goodToWrite) {\r\n                sourceStream.pipe(fs.createWriteStream(target));\r\n            }\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n    }\r\n\r\n    static FindFolder(filename: string) {\r\n        let folder: string = undefined;\r\n        if (filename && this.Exists(filename)) {\r\n            folder = filename.substr(0, filename.lastIndexOf('/'));\r\n            if(String.IsNullOrEmpty(folder)){\r\n                folder = filename.substr(0, filename.lastIndexOf('\\\\'));\r\n            }\r\n        }\r\n        return folder;\r\n    }\r\n}","\r\ndeclare var electron: any;\r\ndeclare var fs: any;\r\ndeclare var path: any;\r\n\r\nexport class Directory {\r\n\r\n    private get App(): any {\r\n        return electron.remote.app;\r\n    }\r\n\r\n    GetUserDataFolder(): string {\r\n        return this.App.getPath('userData');\r\n    }\r\n    GetAppDataFolder(): string {\r\n        return this.App.getPath('appData');\r\n    }\r\n    GetMyDocumentFolder(): string {\r\n        return this.App.getPath('documents');\r\n    }\r\n    GetPictureFolder(): string {\r\n        return this.App.getPath('pictures');\r\n    }\r\n    /** Get current executable file */\r\n    GetCurrentFolder(): string {\r\n        return this.App.getPath('exe');\r\n    }\r\n    /** Get temporary folder */\r\n    GetTempFolder(): string {\r\n        return this.App.getPath('temp');\r\n    }\r\n    GetAppName(): string {\r\n        return this.App.getName();\r\n    }\r\n    ShowItemInFolder(value: string): void {\r\n        electron.remote.shell.showItemInFolder(value);\r\n    }\r\n    Exist(value: string): boolean {\r\n        try {\r\n            fs.accessSync(value, fs.F_OK);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    EnsureFolderExist(value: string): void {\r\n        if (!this.Exist(value)) {\r\n            try {\r\n                fs.mkdirSync(value);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n    Combine(path1: string, path2: string): string {\r\n        return path.join(path1, path2);\r\n    }\r\n}","import { ILoggerProvider } from '../ILoggerProvider';\r\nimport { ILogger } from '../ILogger';\r\nimport { LogLevel } from '../LogLevel';\r\nimport { Log4JsLogger } from './Log4JsLogger';\r\nimport * as IO from '../../io/index';\r\n\r\ndeclare var log4js: any;\r\ndeclare var electron: any;\r\n\r\nexport class Log4JsLoggerProvider implements ILoggerProvider {\r\n\r\n    constructor(initializer?: () => void, logFileName = 'log.txt') {\r\n\r\n        if (initializer) {\r\n            initializer();\r\n        } else {\r\n            try {\r\n                let directory = new IO.Directory();\r\n                let folder = directory.GetUserDataFolder();\r\n                directory.EnsureFolderExist(folder);\r\n                let file = directory.Combine(folder, logFileName);\r\n\r\n                log4js.configure({\r\n                    appenders: {\r\n                        file: { type: 'file', filename: file, maxLogSize: 20480, backups: 2 },\r\n                        console: { type: 'console', }\r\n                    },\r\n                    categories: {\r\n                        default: { appenders: ['console', 'file'], level: 'debug' }\r\n                    }\r\n                });\r\n            } catch (e) {\r\n                console.log('Not Electron runtime, initialize Log4JS failed.');\r\n            }\r\n\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Create logger \r\n     * @param name logger name\r\n     */\r\n    CreateLogger(name: string): ILogger {\r\n        let loggerName = name ? name : 'Default';\r\n        let log4Logger = log4js.getLogger(loggerName);\r\n\r\n        return new Log4JsLogger(loggerName, log4Logger);\r\n    }\r\n\r\n    Dispose(): void {\r\n\r\n    }\r\n}","import { ILoggerFactory } from './ILoggerFactory';\r\nimport { DefaultLoggerFactory } from './DefaultLoggerFactory';\r\nimport { DebugLoggerProvider } from './debug/DebugLoggerProvider';\r\nimport { Log4JsLoggerProvider } from './log4js/Log4JsLoggerProvider';\r\n\r\n/** Extension method implementation in TypeScript\r\n * 1. create extension methods class, method declared as static\r\n * 2. declare module for the type to be extented\r\n * 3. hook the method delcaration to implementation\r\n */\r\n\r\n/**\r\n * Extension methods for LoggerFactory\r\n */\r\nexport class LoggerFactoryExtensions {\r\n    /**\r\n     * Add Debugger to logger\r\n     * @param this ILoggerFactory instance\r\n     */\r\n    static AddDebug(this: ILoggerFactory): ILoggerFactory {\r\n        let provider = new DebugLoggerProvider();\r\n        this.AddProvider(provider);\r\n        return this;\r\n    }\r\n    /**\r\n    * Add Log4JS to logging \r\n    * @param this ILoggerFactory instance\r\n    */\r\n    static AddLog4Js(this: ILoggerFactory): ILoggerFactory;\r\n    static AddLog4Js(this: ILoggerFactory, initializer?: () => void, logFileName = 'log.txt'): ILoggerFactory {\r\n        let provider = new Log4JsLoggerProvider(initializer, logFileName);\r\n        this.AddProvider(provider);\r\n        return this;\r\n    }\r\n}\r\n\r\n/** Exten type of the implementation */\r\ndeclare module './DefaultLoggerFactory' {\r\n    interface DefaultLoggerFactory {\r\n        AddDebug: () => ILoggerFactory;\r\n        AddLogJs: (initializer?: () => void, logFileName?: string) => ILoggerFactory;\r\n    }\r\n}\r\n\r\n/** Extend type of the interface */\r\ndeclare module './ILoggerFactory' {\r\n    interface ILoggerFactory {\r\n        AddDebug: () => ILoggerFactory;\r\n        AddLogJs: (initializer?: () => void, logFileName?: string) => ILoggerFactory;\r\n    }\r\n}\r\n\r\n/** hook defination to the implementation */\r\nDefaultLoggerFactory.prototype.AddLogJs = LoggerFactoryExtensions.AddLog4Js;\r\nDefaultLoggerFactory.prototype.AddDebug = LoggerFactoryExtensions.AddDebug;\r\n","import { Injectable, Inject } from '@angular/core';\r\nimport * as Logging from '../logging/index';\r\nimport { IExceptionHandler } from './IExceptionHandler';\r\nimport { LoggerFactoryToken } from '../Tokens';\r\n\r\n@Injectable()\r\nexport class LoggingExceptionHandler implements IExceptionHandler {\r\n    private logger: Logging.ILogger;\r\n\r\n    constructor(@Inject(LoggerFactoryToken) private loggerFactory: Logging.ILoggerFactory) {\r\n        this.logger = loggerFactory.CreateLogger('ExceptionHandler');\r\n    }\r\n\r\n    Handle(exception: Error): void {\r\n        this.logger.Error(exception);\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport { Http, Headers } from '@angular/http';\r\nimport 'rxjs/add/operator/toPromise';\r\nimport * as ExceptionHandling from '../exception/index';\r\nimport * as Logging from '../logging/index';\r\n\r\n@Injectable()\r\nexport class HttpClient {\r\n\r\n    private logger: Logging.ILogger;\r\n    private headers: Headers;\r\n    private errorHandler: (error: any) => void;\r\n    OutputDebugging = true;\r\n\r\n    constructor(\r\n        private http: Http,\r\n        private exceptionHandler: ExceptionHandling.LoggingExceptionHandler,\r\n        loggerFactory: Logging.DefaultLoggerFactory) {\r\n\r\n        this.logger = loggerFactory.CreateLogger('HttpClient');\r\n\r\n        this.headers = new Headers();\r\n        this.headers.append('Content-Type', 'application/json');\r\n    }\r\n\r\n    get ErrorHander(): (error: any) => void {\r\n        return this.errorHandler;\r\n    }\r\n    set ErrorHander(value: (error: any) => void) {\r\n        this.errorHandler = value;\r\n    }\r\n\r\n    /**\r\n     * Post data to given url \r\n     * @param url Post url\r\n     * @param data  post data\r\n     */\r\n    Post(url: string, data: any): Promise<any> {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            const body = JSON.stringify(data);\r\n\r\n            if (self.OutputDebugging) {\r\n                self.logger\r\n                    .Debug(`Post data url: ${url}`)\r\n                    .Debug(body);\r\n            }\r\n\r\n            self.http.post(url, body, { headers: self.headers })\r\n                .toPromise()\r\n                .then(response => {\r\n                    resolve(response.json());\r\n                })\r\n                .catch(error => {\r\n                    self.exceptionHandler.Handle(error);\r\n                    if (self.errorHandler)\r\n                        self.errorHandler(error);\r\n                    reject(error);\r\n                }\r\n                );\r\n        });\r\n    }\r\n    /**\r\n     * Post raw string to given url\r\n     * @param url url to post data\r\n     * @param data data in string format\r\n     */\r\n    PostRaw(url: string, data: string): Promise<any> {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n\r\n            if (self.OutputDebugging) {\r\n                self.logger\r\n                    .Debug(`Post data url: ${url}`)\r\n                    .Debug(data);\r\n            }\r\n\r\n            self.http.post(url, data, { headers: self.headers })\r\n                .toPromise()\r\n                .then(response => {\r\n                    resolve(response.json());\r\n                })\r\n                .catch(error => {\r\n                    self.exceptionHandler.Handle(error);\r\n                    if (self.errorHandler)\r\n                        self.errorHandler(error);\r\n                    reject(error);\r\n                }\r\n                );\r\n        });\r\n    }\r\n    /**\r\n     * Delete reques\r\n     * @param url the url for delete\r\n     */\r\n    Delete(url: string): Promise<any> {\r\n        const self = this;\r\n        return new Promise((resolve, reject) => {\r\n            self.http.delete(url)\r\n                .toPromise()\r\n                .then(response => {\r\n                    resolve(response.json());\r\n                })\r\n                .catch(error => {\r\n                    self.exceptionHandler.Handle(error);\r\n                    if (self.errorHandler)\r\n                        self.errorHandler(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n    /** \r\n     * Get data from given url in async mode\r\n     * @param url the url to get data.\r\n     */\r\n    Get(url: string, useRaw = false): Promise<any> {\r\n        const self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (self.OutputDebugging) {\r\n                self.logger.Debug(`Get data url: ${url}`);\r\n            }\r\n            self.http.get(url, {headers: self.headers})\r\n                .toPromise()\r\n                .then(response => {\r\n                    if (useRaw) {\r\n                        resolve(response);\r\n                    } else {\r\n                        resolve(response.json());\r\n                    }\r\n                })\r\n                .catch(error => {\r\n                    self.exceptionHandler.Handle(error);\r\n                    if (self.errorHandler)\r\n                        self.errorHandler(error);\r\n                    reject(error);\r\n                });\r\n        });\r\n    }\r\n\r\n    /**\r\n     * Create a new header with given token\r\n     * @param token bearer token value\r\n     */\r\n    UseToken(token: string): HttpClient {\r\n        const headers = this.CreateDefaultHeader();\r\n        if (token) {\r\n            headers.append('Authorization', `bearer ${token}`);\r\n        }\r\n        this.headers = headers;\r\n        return this;\r\n    }\r\n    /**\r\n     * User given header or the default header with content type set to json\r\n     * @param headers given header\r\n     */\r\n    UseHeader(headers: Headers = this.CreateDefaultHeader()): HttpClient {\r\n        if (!headers)\r\n            throw new Error('Given http header is null.');\r\n        this.headers = headers;\r\n        return this;\r\n    }\r\n\r\n    private CreateDefaultHeader(): Headers {\r\n        const headers = new Headers();\r\n        headers.append('Content-Type', 'application/json');\r\n        return headers;\r\n    }\r\n}","import { Injectable } from '@angular/core';\r\nimport * as Common from '../common/index';\r\n\r\ndeclare let electron: any;\r\ndeclare let fs: any;\r\ndeclare let Crypts: any;\r\ndeclare let NjPath: any;\r\ndeclare let Mime: any;\r\ndeclare let Path: any;\r\ndeclare let FileSize: any;\r\ndeclare let EventStream: any;\r\ndeclare let EncodingHelper: any;\r\ndeclare const Buffer: any;\r\n\r\n\r\n@Injectable()\r\nexport class ElectronUtil {\r\n    algorithm = 'aes-256-ctr';\r\n    password = 'a3b8d9w34';\r\n\r\n    get Electron(): any {\r\n        return electron;\r\n    }\r\n    get App(): any {\r\n        return electron.remote.app;\r\n    }\r\n    get MainMenu(): any {\r\n        return electron.remote.Menu;\r\n    }\r\n    get IpcClient(): any {\r\n        return electron.ipcRenderer;\r\n    }\r\n    get Remote(): any {\r\n        return electron.remote;\r\n    }\r\n    GetUserDataFolder(): string {\r\n        return this.App.getPath('userData');\r\n    }\r\n    GetAppDataFolder(): string {\r\n        return this.App.getPath('appData');\r\n    }\r\n    GetMyDocumentFolder(): string {\r\n        return this.App.getPath('documents');\r\n    }\r\n    GetPictureFolder(): string {\r\n        return this.App.getPath('pictures');\r\n    }\r\n    GetAppName(): string {\r\n        return this.App.getName();\r\n    }\r\n    OpenFileDialog(filters: any = null): string {\r\n        let dialog = electron.remote.dialog;\r\n        let fileName = dialog.showOpenDialog({\r\n            properties: ['openFile'],\r\n            filters: filters\r\n        });\r\n        return fileName.toString();\r\n    }\r\n    OpenFilesDialog(filters: any = null): string[] {\r\n        let dialog = electron.remote.dialog;\r\n        let fileNames = dialog.showOpenDialog({\r\n            properties: ['openFile', 'multiSelections'],\r\n            filters: filters\r\n        });\r\n        return fileNames;\r\n    }\r\n    TextFileFilter(): any {\r\n        return [{ name: 'Text Documents', extensions: ['txt', 'cs', 'ts', 'js', 'scss', 'css', 'html', 'htm'] }];\r\n    }\r\n    ImageFileFilter(): any {\r\n        return [{ name: 'Images', extensions: ['jpg', 'png', 'gif', 'bmp'] }];\r\n    }\r\n    OpenImageDialog(): string {\r\n        return this.OpenFileDialog(this.ImageFileFilter());\r\n    }\r\n    OpenImagesDialog(): string[] {\r\n        return this.OpenFilesDialog(this.ImageFileFilter());\r\n    }\r\n    SetApplicationMenu(menu: any): void {\r\n        electron.remote.Menu.setApplicationMenu(menu);\r\n    }\r\n\r\n    OpenExternal(url: string): void {\r\n        electron.remote.shell.openExternal(url);\r\n    }\r\n    ShowItemInFolder(path: string): void {\r\n        electron.remote.shell.showItemInFolder(path);\r\n    }\r\n\r\n    ReadFileAsync(file: string): Promise<any> {\r\n        let self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            if (!self.Exist(file))\r\n                reject(new Error(`File doesn't exist.`));\r\n\r\n            fs.readFile(file, 'binary', (error, data) => {\r\n                        if (error)\r\n                            reject(error);\r\n\r\n                        let content = EncodingHelper.decode(data, 'utf8');\r\n\r\n                        resolve(content);\r\n                    });\r\n        });\r\n    }\r\n    ReadFileLineByLine(file: string): Promise<string> {\r\n        let self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            let lines = [];\r\n            let stream = fs.createReadStream(file)\r\n                .pipe(EventStream.split())\r\n                .pipe(EventStream.mapSync(\r\n                    function (line) {\r\n                        stream.pause();\r\n\r\n                        lines.push(line);\r\n\r\n                        stream.resume();\r\n                    })\r\n                    .on('error', function () {\r\n                        reject('Read file error.');\r\n                    })\r\n                    .on('end', function () {\r\n                        resolve(lines.join(''));\r\n                    })\r\n                );\r\n        });\r\n    }\r\n    ReadFileAsBase64Async(file: string): Promise<string> {\r\n        let self = this;\r\n        let fullPath = this.NormalizePath(file.toString());\r\n        console.log('Full path: ' + fullPath);\r\n        return new Promise(function (resolve, reject) {\r\n            if (!self.Exist(fullPath))\r\n                reject(new Error(`File doesn't exist.' + fullPath`));\r\n\r\n            console.log('File to open ' + fullPath);\r\n\r\n            let data = fs.readFileSync(fullPath, 'base64');\r\n            let buffer = new Buffer(data, 'base64');\r\n            let base64Data = buffer.toString('base64');\r\n            resolve(base64Data);\r\n        });\r\n    }\r\n    ReadFileAsBase64(file: string): string {\r\n        let self = this;\r\n        let fullPath = this.NormalizePath(file.toString());\r\n        if (!self.Exist(fullPath))\r\n            throw Error(`File doesn't exist.${fullPath}`);\r\n\r\n        let data = fs.readFileSync(fullPath, 'base64');\r\n        let buffer = new Buffer(data, 'base64');\r\n        let base64Data = buffer.toString('base64');\r\n        return base64Data;\r\n\r\n    }\r\n    ReadFileStream(file: string): any {\r\n        return fs.createReadStream(file);\r\n    }\r\n\r\n    WriteFileAsync(file: string, data: any): Promise<any> {\r\n        console.log('Write data to file.');\r\n        //console.log(file);\r\n        //console.log(data);\r\n        let self = this;\r\n        return new Promise(function (resolve, reject) {\r\n            fs.writeFile(file, data, (error) => {\r\n                if (error)\r\n                    reject(error);\r\n\r\n                resolve(true);\r\n            });\r\n        });\r\n    }\r\n    GetMimeType(file: string): string {\r\n        try {\r\n            return Mime.lookup(file);\r\n        } catch (error) {\r\n            console.log('Get MIME error: ' + error);\r\n        }\r\n    }\r\n    GetFilename(file: string): string {\r\n        try {\r\n            return Path.basename(file);\r\n        } catch (error) {\r\n            console.log('Get file name error: ' + error);\r\n        }\r\n    }\r\n    GetFilenameWithoutExtension(file: string): string {\r\n        let filename = this.GetFilename(file);\r\n        return Path.parse(filename).name;\r\n    }\r\n    GetFileSize(file: string): number {\r\n        let stats = fs.statSync(file);\r\n        return stats['size'];\r\n    }\r\n    GetFileSizeString(file: string): string {\r\n        try {\r\n            let size = this.GetFileSize(file);\r\n            let sizeString = FileSize(size);\r\n            return sizeString;\r\n        } catch (error) {\r\n            console.log('Get file name error: ' + error);\r\n        }\r\n    }\r\n    ConverToFileSizeString(size: number): string {\r\n        return FileSize(size);\r\n    }\r\n    Encrypt(value: string): string {\r\n        if (!value)\r\n            return '';\r\n        let cipher = Crypts.createCipher(this.algorithm, this.password);\r\n        let crypted = cipher.update(value, 'utf8', 'hex');\r\n        crypted += cipher.final('hex');\r\n        return crypted;\r\n    }\r\n    Decrypt(value: string): string {\r\n        if (!value)\r\n            return '';\r\n        let decipher = Crypts.createDecipher(this.algorithm, this.password)\r\n        let dec = decipher.update(value, 'hex', 'utf8')\r\n        dec += decipher.final('utf8');\r\n        return dec;\r\n    }\r\n\r\n    Exist(path: string): boolean {\r\n        try {\r\n            fs.accessSync(path, fs.F_OK);\r\n            return true;\r\n        } catch (e) {\r\n            return false;\r\n        }\r\n    }\r\n\r\n    EnsureFolderExist(path: string): void {\r\n        if (!this.Exist(path)) {\r\n            try {\r\n                fs.mkdirSync(path);\r\n            } catch (error) {\r\n                console.log(error);\r\n            }\r\n        }\r\n    }\r\n\r\n    CombinePath(base: string, paths: string): string {\r\n        let value: string;\r\n        try {\r\n            value = NjPath.join(base, paths);\r\n        } catch (error) {\r\n            console.log(error);\r\n        }\r\n        return value;\r\n    }\r\n    NormalizePath(path: string): string {\r\n        return NjPath.normalize(path);\r\n    }\r\n\r\n    CreateGuidString(): string {\r\n        let guid = Common.Guid.New();\r\n        return guid.Value;\r\n    }\r\n    CreateGuid(): Common.Guid {\r\n        return Common.Guid.New();\r\n    }\r\n}","\r\nimport { IServiceProvider } from './IServiceProvider';\r\nimport { Injectable, Injector } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class AngularServiceProvider implements IServiceProvider {\r\n\r\n    /**\r\n     *\r\n     */\r\n    constructor(private injector: Injector) {\r\n\r\n    }\r\n    /**\r\n     * Gets the service object of the specified type.\r\n     */\r\n    GetService(type: any): any {\r\n        return this.injector.get(type);\r\n    }\r\n\r\n}","import { Injector, Type, InjectionToken, Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class ServiceLocator {\r\n    \r\n    private static currentProvider: Injector = undefined;\r\n\r\n    static SetLocatorProvider(provider: () => Injector): void {\r\n        ServiceLocator.currentProvider = provider();\r\n    }\r\n\r\n    static GetService<T>(token: Type<T> | InjectionToken<T>): T {\r\n        return ServiceLocator.currentProvider.get(token);\r\n    }\r\n\r\n}","\r\ninterface String {\r\n    ToLower: () => string;\r\n    ToUpper: () => string;\r\n    Trim: () => string;\r\n    Normalize: () => string;\r\n    StartsWith: (part: string) => boolean;\r\n    EndsWith: (part: string) => boolean;\r\n    CapFirst: () => string;\r\n    CapWords: () => string;\r\n    TruncateWords: (number: number) => string;\r\n    Contains: (value: string) => boolean;\r\n    Slugify: (lower?: boolean) => string;\r\n    StripHtml: () => string;\r\n    EscapeHtml: () => string;\r\n    CountWord: () => number;\r\n    HtmlToText: () => string;\r\n    ValidateEmail: () => boolean;\r\n    IndexOf: (value: string) => number;\r\n    LastIndexOf: (value: string) => number;\r\n    SubString: (start: number, length: number) => string;\r\n}\r\ninterface StringConstructor {\r\n    IsNullOrEmpty: (value: any) => boolean;\r\n    IsValid: (value: any) => boolean;\r\n    Empty: () => string;\r\n}\r\n\r\n\r\nString.prototype.ToLower = function (): string {\r\n    return this.toLowerCase();\r\n};\r\nString.prototype.ToUpper = function (): string {\r\n    return this.toUpperCase();\r\n};\r\nString.prototype.Trim = function (): string {\r\n    return this.replace(/^\\s+|\\s+$/g, '');\r\n};\r\nString.prototype.Normalize = function (): string {\r\n    return this.replace(/^\\s*|\\s(?=\\s)|\\s*$/g, '');\r\n};\r\nString.prototype.StartsWith = function (part: string): boolean {\r\n    return this.slice(0, part.length) === part;\r\n};\r\nString.prototype.EndsWith = function (part: string): boolean {\r\n    return this.slice(part.length) === part;\r\n};\r\nString.prototype.CapFirst = function (): string {\r\n    if (this.length === 1) {\r\n        return this.toUpperCase();\r\n    } else if (this.length > 0) {\r\n        let regex: RegExp = /^(\\(|\\[|'|')/;\r\n        if (regex.test(this)) {\r\n            return this.substring(0, 2).toUpperCase() + this.substring(2);\r\n        } else {\r\n            return this.substring(0, 1).toUpperCase() + this.substring(1);\r\n        }\r\n    }\r\n    return null;\r\n};\r\nString.prototype.CapWords = function (): string {\r\n    let regexp: RegExp = /\\s/;\r\n    let words = this.split(regexp);\r\n    if (words.length === 1) {\r\n        return words[0].capFirst();\r\n    } else if (words.length > 1) {\r\n        let result = '';\r\n        for (let i = 0; i < words.length; i++) {\r\n            if (words[i].capFirst() !== null) {\r\n                result += words[i].capFirst() + ' ';\r\n            }\r\n        }\r\n        result.trim();\r\n        return result;\r\n    }\r\n    return null;\r\n};\r\nString.prototype.TruncateWords = function (num: number): string {\r\n    let words: Array<string> = this.split(/\\s+/);\r\n    if (words.length > num) {\r\n        return words.slice(0, num).join(' ');\r\n    }\r\n    return words.join(' ');\r\n};\r\nString.prototype.StripHtml = function (): string {\r\n    let content: string = this.replace(/<[\\/]?([^> ]+)[^>]*>/g, '');\r\n    content = content.replace(/<style[^>]*>[\\s\\S]*?<\\/style>/ig, '');\r\n    content = content.replace(/<script[^>]*>[\\s\\S]*?<\\/script>/ig, '');\r\n    content = content.replace(/<!--[\\s\\S]*?-->/g, '');\r\n    content = content.replace('&nbsp;', ' ');\r\n    content = content.replace('&amp;', '&');\r\n    return content;\r\n};\r\nString.prototype.EscapeHtml = function (): string {\r\n    let content: string = this.replace(/'/g, '&quot;');\r\n    content.replace(/&(?!\\w+;)/g, '&amp;');\r\n    content.replace(/>/g, '&gt;');\r\n    content.replace(/</g, '&lt;');\r\n    return content;\r\n};\r\nString.prototype.Contains = function (val: string): boolean {\r\n    if (this.indexOf(val) !== -1) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nString.prototype.Slugify = function (lower: boolean = true): string {\r\n    if (!lower) {\r\n        return this.lower().normalize().replace(/[^a-z0-9]/gi, '-');\r\n    }\r\n    return this.normalize().replace(/[^a-z0-9]/gi, '-');\r\n};\r\nString.prototype.HtmlToText = function (): string {\r\n    const output = this.replace(/<[^>]*>?/g, '');\r\n    return output;\r\n}\r\nString.prototype.CountWord = function (): number {\r\n    let content = this;\r\n    if (!content)\r\n        return 0;\r\n    let words = '', symbols = '';\r\n    content.replace(/([\\w\\s]*)([^\\w;,.''{}\\[\\]+_)(*&\\^%$#@!~\\/?]*)/g, (a, b, c): string => {\r\n        words += b;\r\n        symbols += c;\r\n\r\n        return a;\r\n    });\r\n\r\n    let count = words.trim().split(' ').length;\r\n    if (symbols)\r\n        count += symbols.replace(' ', '').split('').length;\r\n\r\n    return count;\r\n}\r\nString.prototype.ValidateEmail = function (): boolean {\r\n    let re = /^(([^<>()\\[\\]\\\\.,;:\\s@\"]+(\\.[^<>()\\[\\]\\\\.,;:\\s@\"]+)*)|(\".+\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\r\n    return re.test(this);\r\n}\r\nString.prototype.IndexOf = function (value: string): number {\r\n    return this.indexOf(value);\r\n}\r\nString.prototype.LastIndexOf = function (value: string): number {\r\n    return this.lastIndexOf(value);\r\n}\r\nString.prototype.SubString = function (start: number, length: number): string {\r\n    return this.substring(start, length);\r\n}\r\n\r\nString.IsNullOrEmpty = function (value: any): boolean {\r\n    if (value === undefined || value === null) {\r\n        return true;\r\n    }\r\n    let text = value.toString();\r\n    if (text === '') {\r\n        return true;\r\n    }\r\n    if (text && text.trim() === '') {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nString.IsValid = function (value: any): boolean {\r\n    return !String.IsNullOrEmpty(value);\r\n}\r\nString.Empty = function (): string {\r\n    return '';\r\n}\r\n\r\n\r\n","\r\nexport function IsDefined(value: any): boolean {\r\n    return typeof value !== 'undefined' && value !== null;\r\n}\r\n\r\nexport function IsObject(item: any): boolean {\r\n    return (item && typeof item === 'object' && !Array.isArray(item));\r\n}\r\n\r\nexport function MergeDeep(target: any, source: any): any {\r\n    target = JSON.parse(JSON.stringify(target));\r\n    source = JSON.parse(JSON.stringify(source));\r\n    let output = Object.assign({}, target);\r\n    if (IsObject(target) && IsObject(source)) {\r\n        Object.keys(source).forEach((key: any) => {\r\n            if (IsObject(source[key])) {\r\n                if (!(key in target)) {\r\n                    Object.assign(output, { [key]: source[key] });\r\n                } else {\r\n                    output[key] = MergeDeep(target[key], source[key]);\r\n                }\r\n            } else {\r\n                Object.assign(output, { [key]: source[key] });\r\n            }\r\n        });\r\n    }\r\n    return output;\r\n}\r\n/**\r\n * Clone given object\r\n * @param source \r\n */\r\nexport function Clone(source: any): any {\r\n    if (!source) {\r\n        return source;\r\n    }\r\n    return JSON.parse(JSON.stringify(source));\r\n}\r\n/**\r\n * \r\n * @param source \r\n * @param target \r\n */\r\nexport function CompareProperties(source: any, target: any): boolean {\r\n    if (source === undefined && target === undefined) {\r\n        return true;\r\n    }\r\n    if (Object.prototype.toString.call(source) === '[object Array]') {\r\n        let arrayX = source as Array<any>;\r\n        let arrayY = target as Array<any>;\r\n        if (arrayX.length !== arrayY.length) {\r\n            return false;\r\n        }\r\n\r\n        for (let index = 0; index < arrayX.length; index++) {\r\n            console.log(arrayX[index]);\r\n            console.log(arrayY[index]);\r\n\r\n            if (CompareProperties(arrayX[index], arrayY[index] === false)) {\r\n                return false;\r\n            }\r\n        }\r\n\r\n    } else {\r\n        let names = Object.getOwnPropertyNames(source);\r\n        // console.log(names);\r\n        for (let name of names) {\r\n            let property = Object.getOwnPropertyDescriptor(target, name);\r\n            if (!property) {\r\n                return false;\r\n            } else {\r\n                if (Object.prototype.toString.call(source) === '[object Array]') {\r\n                    if (CompareProperties(property.value, source[name] === false)) {\r\n                        return false;\r\n                    }\r\n                } else if (property.value !== source[name] && property.value.toString() !== source[name].toString()) {\r\n                    // console.log(`Property ${name} ${typeof property.value}: '${property.value}', '${source[name]}'`);\r\n                    return false;\r\n                }\r\n            }\r\n        }\r\n    }\r\n    return true;\r\n}","\r\n\r\ninterface Array<T> {\r\n    Add: (item: T) => void;\r\n    Empty: () => Array<any>;\r\n    IsEmpty: () => boolean;\r\n    Any: (predicate?: (source: T) => boolean) => boolean;\r\n    Count: () => number;\r\n    Max: () => number;\r\n    Min: () => number;\r\n    OrderBy: (keySelector: (source: T) => any) => Array<T>;\r\n    OrderByDescending: (keySelector: (source: T) => any) => Array<T>;\r\n    Where: (predicate: (source: T) => boolean) => Array<T>;\r\n    Select: <TResult>(selector: (source: T) => TResult) => Array<TResult>;\r\n    ElementAt: (index: number) => any;\r\n    FirstOrDefault: (predicate?: (source: T) => boolean) => T;\r\n    ForEach: (callback: Function) => void;\r\n    Remove: (item: any) => any;\r\n    Contains: (partial: string, strict: boolean) => boolean;\r\n    IndexOfPartial: (partial: string) => number;\r\n    ToObjectArray: (objName: string) => Array<any>;\r\n}\r\n\r\n\r\nArray.prototype.Add = function (item: any): void {\r\n    this.push(item);\r\n};\r\nArray.prototype.Empty = function (): Array<any> {\r\n    return this.splice(0, this.length);\r\n};\r\nArray.prototype.IsEmpty = function (): boolean {\r\n    if (this.length === 0) {\r\n        return true;\r\n    }\r\n    return false;\r\n};\r\nArray.prototype.ElementAt = function (index: number): any {\r\n    return this[index];\r\n};\r\nArray.prototype.FirstOrDefault = function (predicate?: (source: any) => boolean): any {\r\n    let result = null;\r\n\r\n    if (predicate) {\r\n        for (let item of this) {\r\n            if (predicate(item)) {\r\n                result = item;\r\n                break;\r\n            }\r\n        }\r\n    } else {\r\n        result = this[0];\r\n    }\r\n\r\n    return result;\r\n};\r\nArray.prototype.Max = function (): number {\r\n    let max = this.reduce(function (a, b) {\r\n        return Math.max(a, b);\r\n    });\r\n    return max;\r\n};\r\nArray.prototype.Min = function (): number {\r\n    let min = this.reduce(function (a, b) {\r\n        return Math.min(a, b);\r\n    });\r\n    return min;\r\n};\r\nArray.prototype.Count = function (): number {\r\n    return this.length;\r\n};\r\nArray.prototype.Any = function (predicate?: (source: any) => boolean): boolean {\r\n    if (predicate) {\r\n        for (let item of this) {\r\n            if (predicate(item))\r\n                return true;\r\n        }\r\n        return false;\r\n    } else {\r\n        if (this.length === 0) {\r\n            return false;\r\n        }\r\n        return true;\r\n    }\r\n\r\n};\r\nArray.prototype.Where = function (predicate: (source: any) => boolean): Array<any> {\r\n    return this.filter(x => {\r\n        return predicate(x);\r\n    });\r\n};\r\nArray.prototype.Select = function <TResult> (selector: (source: any) => TResult): Array<TResult> {\r\n    let result = [];\r\n    for (let item of this) {\r\n        result.push(selector(item));\r\n    }\r\n    return result;\r\n};\r\nArray.prototype.OrderBy = function (keySelector: (source: any) => any): Array<any> {\r\n    return this.sort(function (a, b) {\r\n        return keySelector(a) > keySelector(b);\r\n    });\r\n};\r\nArray.prototype.OrderByDescending = function (keySelector: (source: any) => any): Array<any> {\r\n    return this.sort(function (a, b) {\r\n        return keySelector(b) - keySelector(a);\r\n    });\r\n};\r\nArray.prototype.ForEach = function (callback: Function): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n        callback(i, this[i]);\r\n    }\r\n};\r\nArray.prototype.Remove = function (item: any): any {\r\n    let index = this.indexOf(item);\r\n    if (index !== -1) {\r\n        return this.splice(index, 1);\r\n    }\r\n    return null;\r\n};\r\nArray.prototype.Contains = function (partial: string, strict: boolean): boolean {\r\n    for (let i = 0; i < this.length; i++) {\r\n        if (!strict && this[i].contains(partial)) {\r\n            return true;\r\n        }\r\n        if (strict && this[i] === partial) {\r\n            return true;\r\n        }\r\n    }\r\n    return false;\r\n};\r\nArray.prototype.IndexOfPartial = function (partial: string) {\r\n    for (let i = 0; i < this.length; i++) {\r\n        if (this[i].contains(partial)) {\r\n            return i;\r\n        }\r\n    }\r\n    return -1;\r\n};\r\n/*\r\n * There are frameworks that auto-generate JSON based on data schemas, but sometimes they\r\n * return data in inconsistent ways. For example, an array of strings might be returned\r\n * instead of an array of objects containing strings, etc. because the underlying data at the time\r\n * only cotains the string value, but when other data is present (in the database, etc.),\r\n * it will return the object array. Certain convenience methods are necessary to force proper formatting.\r\n */\r\n\r\nArray.prototype.ToObjectArray = function (objName: string): Array<any> {\r\n    if (objName === undefined || objName === null) {\r\n        throw new Error('Error: Property name must be provided for conversion.');\r\n    }\r\n    let items: any = this;\r\n    if (typeof (items[0]) === 'string' || typeof (items[0]) === 'number' || typeof (items[0]) === 'boolean') {\r\n        for (let i = 0; i < items.length; i++) {\r\n            let val: any = items[i];\r\n            items[i] = {};\r\n            items[i][objName] = val;\r\n        }\r\n        return items;\r\n    } else {\r\n        return this;\r\n    }\r\n};\r\n","interface Document {\r\n    SelectOne: (selector: string) => Element;\r\n    SelectAll: (selector: string) => NodeListOf<Element>;\r\n    Create: (html: string) => Element;\r\n}\r\n\r\ninterface NodeList {\r\n    ForEach: (callback: Function) => void;\r\n    Last: () => Element;\r\n}\r\n\r\ninterface Element {\r\n    Attribute: (name: string, value?: string) => string & Element;\r\n    Parent: () => Element;\r\n    First: (selector: string) => Element;\r\n    Append: (html: string) => Element;\r\n    Empty: () => Element;\r\n    Drop: () => Element;\r\n    RemoveEvent: (event: string) => Element;\r\n    AddEvent: (event: string, callback: Function, overwrite?: boolean) => Element;\r\n    Show: (t?: string) => Element;\r\n    Hide: () => Element;\r\n    Toggle: () => Element;\r\n    AddClass: (className: string) => Element;\r\n    RemoveClass: (className: string) => Element;\r\n    AsString: () => string;\r\n    SelectOne: (selector: string) => Element;\r\n    SelectAll: (selector: string) => NodeListOf<Element>;\r\n    HasMatches: (selector: string) => boolean;\r\n    Up: (selector: string) => Element;\r\n    IsHidden: () => Boolean;\r\n}\r\n\r\ninterface HTMLElement {\r\n    Clean: () => HTMLElement;\r\n    Value: (val?: string) => string;\r\n}\r\n\r\n\r\n\r\nDocument.prototype.SelectOne = function (selector: string): Element {\r\n    return document.querySelector(selector);\r\n};\r\n\r\nDocument.prototype.SelectAll = function (selector: string): NodeListOf<Element> {\r\n    return document.querySelectorAll(selector);\r\n};\r\n\r\nDocument.prototype.Create = function (html: string): Element {\r\n    let placeholder = document.createElement('div');\r\n    placeholder.innerHTML = html;\r\n    return <Element>placeholder.childNodes[0];\r\n};\r\n\r\nNodeList.prototype.ForEach = function (callback: Function): void {\r\n    for (let i = 0; i < this.length; i++) {\r\n        callback(i, this[i]);\r\n    }\r\n};\r\n\r\nNodeList.prototype.Last = function (): Element {\r\n    return this[this.length - 1];\r\n};\r\n\r\nElement.prototype.SelectOne = function (selector: string): Element {\r\n    return this.querySelector(selector);\r\n};\r\n\r\nElement.prototype.SelectAll = function (selector: string): NodeListOf<Element> {\r\n    return this.querySelectorAll(selector);\r\n};\r\n\r\nElement.prototype.Attribute = function (name: string, value?: string): string & Element {\r\n    if (value != null) {\r\n        this.setAttribute(name, value);\r\n        return this;\r\n    }\r\n    return this.getAttribute(name);\r\n};\r\n\r\nElement.prototype.Parent = function (): Element {\r\n    return this.parentNode;\r\n};\r\n\r\nElement.prototype.HasMatches = function (selector: string): boolean {\r\n    if ((<any>this).matches != null) {\r\n        return (<any>this).matches(selector);\r\n    } else if ((<any>this).msMatchesSelector != null) {\r\n        return (<any>this).msMatchesSelector(selector);\r\n    }\r\n    return false;\r\n};\r\n\r\nElement.prototype.Up = function (selector: string): Element {\r\n    let el: Element = this;\r\n    if ((<any>el).closest != null) {\r\n        return (<any>el).closest(selector);\r\n    } else {\r\n        while (el) {\r\n            if (el.HasMatches(selector)) {\r\n                return <Element>el;\r\n            }\r\n            el = el.parentElement;\r\n        }\r\n    }\r\n};\r\n\r\nElement.prototype.First = function (selector: string): Element {\r\n    function _decend(node: Element): Element {\r\n        let _currentNode = node;\r\n        let nodeList: NodeList = _currentNode.childNodes;\r\n        for (let i = 0; i < nodeList.length; i++) {\r\n            if (nodeList[i].nodeName.ToLower() === selector.ToLower()) {\r\n                return <Element>nodeList[i];\r\n            }\r\n        }\r\n        _decend(_currentNode);\r\n    }\r\n    return _decend(this);\r\n};\r\n\r\nElement.prototype.Append = function (html: string): Element {\r\n    this.insertAdjacentHTML('beforeend', html);\r\n    return this;\r\n};\r\n\r\nElement.prototype.Empty = function (): Element {\r\n    this.innerHTML = '';\r\n    return this;\r\n};\r\n\r\nElement.prototype.Drop = function (): Element {\r\n    let self = this;\r\n    let parent = self.parentNode;\r\n    parent.removeChild(self);\r\n    return self;\r\n};\r\n\r\nElement.prototype.RemoveEvent = function (event: string): Element {\r\n    let evt = this[`on${event}`] || this[`${event}`];\r\n    try {\r\n        this.removeEventListener(event, evt);\r\n    } catch (e) { }\r\n    try {\r\n        this.detachEvent(`on${event}`, evt);\r\n    } catch (e) { }\r\n    this[`on${event}`] = null;\r\n    this[`${event}`] = null;\r\n    return this;\r\n};\r\n\r\nElement.prototype.AddEvent = function (event: string, callback: Function, overwrite: boolean = false): Element {\r\n    if (overwrite) {\r\n        this[`on${event}`] = callback;\r\n    } else {\r\n        this.addEventListener(event, callback);\r\n    }\r\n    return this;\r\n};\r\n\r\nElement.prototype.Show = function (t: string = 'block'): Element {\r\n    let styles = this.attribute('style');\r\n    if (styles != null && styles !== '') {\r\n        return this.attribute('style', styles.setValueByKey('display', t));\r\n    }\r\n    return this.attribute('style', `display:${t}`);\r\n};\r\n\r\nElement.prototype.Hide = function (): Element {\r\n    let styles = this.attribute('style');\r\n    if (styles != null && styles !== '') {\r\n        return this.attribute('style', styles.setValueByKey('display', 'none'));\r\n    }\r\n    return this.attribute('style', `display:none;`);\r\n};\r\nElement.prototype.Toggle = function (): Element {\r\n    if (!(this.offsetWidth || this.offsetHeight || this.getClientRects().length)) {\r\n        return this.show();\r\n    } else {\r\n        return this.hide();\r\n    }\r\n};\r\n\r\nElement.prototype.AddClass = function (className: string): Element {\r\n    this.className += ` ${className}`;\r\n    this.className = this.className.trim();\r\n    return this;\r\n};\r\n\r\nElement.prototype.RemoveClass = function (className: string): Element {\r\n    this.className = (<string>this.className).replace(className, '').normalize();\r\n    return this;\r\n};\r\n\r\nElement.prototype.AsString = function (): string {\r\n    return this.outerHTML;\r\n};\r\n\r\nElement.prototype.IsHidden = function (): boolean {\r\n    return (this.offsetParent === null);\r\n};\r\n\r\nHTMLElement.prototype.Clean = function (): HTMLElement {\r\n    this.value = this.value.replace(/\\r?\\n/g, '\\r\\n');\r\n    return this;\r\n};\r\n\r\nHTMLElement.prototype.Value = function (val?: string): string {\r\n    if (val != null) {\r\n        if (this.nodeName.lower() === 'textarea') {\r\n            this.innerHTML = val;\r\n            try {\r\n                this.innerText = val;\r\n            } catch (e) { }\r\n            try {\r\n                this.value = val;\r\n            } catch (e) { }\r\n        } else if (this.nodeName.lower() === 'input') {\r\n            switch (this.attribute('type').lower()) {\r\n                case 'file':\r\n                    break;\r\n                case 'checkbox':\r\n                    if (<boolean><any>val) {\r\n                        this.checked = true;\r\n                    } else {\r\n                        this.checked = false;\r\n                    }\r\n                    break;\r\n                case 'radio':\r\n                    let name: string = this.attribute('name');\r\n                    let radios: NodeListOf<Element> = document.SelectAll(`input[type='radio'][name='${name}']`);\r\n                    radios.ForEach(function (idx, elem: Element) {\r\n                        if (elem.Attribute('value') === val) {\r\n                            (<HTMLInputElement>elem).checked = true;\r\n                        } else {\r\n                            (<HTMLInputElement>elem).checked = false;\r\n                        }\r\n                    });\r\n                    break;\r\n                default:\r\n                    this.value = val;\r\n                    break;\r\n            }\r\n        } else if (this.nodeName.lower() === 'select') {\r\n            for (let i = 0; i < this.options.length; i++) {\r\n                if (this.options[i].value === val) {\r\n                    this.selectedIndex = i;\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n    } else {\r\n        if (this.nodeName.lower() === 'textarea') {\r\n            try {\r\n                return this.value;\r\n            } catch (e) { }\r\n            if (this.innerText != null && (<string>this.innerText).trim() !== '') {\r\n                return this.innerText;\r\n            } else if (this.innerHTML != null && (<string>this.innerHTML).trim() !== '') {\r\n                return this.innerHTML;\r\n            }\r\n            return null;\r\n        } else if (this.nodeName.lower() === 'input') {\r\n            switch (this.attribute('type').lower()) {\r\n                case 'checkbox':\r\n                    return this.checked;\r\n                case 'radio':\r\n                    let name: string = this.attribute('name');\r\n                    return (<HTMLInputElement>document.SelectOne(`input[type='radio'][name='${name}']:checked`)).value;\r\n                default:\r\n                    return this.value;\r\n            }\r\n        } else if (this.nodeName.lower() === 'select') {\r\n            return this.options[this.selectedIndex].value;\r\n        }\r\n    }\r\n    return val;\r\n};","\r\n/**\r\n * Delay give ms\r\n * @param elapse length of time\r\n */\r\nexport const Delay = function (elapse: number): Promise<any> {\r\n    return new Promise((resolve, reject) => {\r\n        setTimeout(function () {\r\n            resolve();\r\n        }, elapse);\r\n    });\r\n}","import { Action } from './Action';\r\nimport * as Collections from '../collections/index';\r\n\r\nimport { IAction } from './IAction';\r\n\r\nexport interface IActionRepository {\r\n    readonly Actions: Collections.List<IAction>;\r\n\r\n    Register(action: IAction): IActionRepository;\r\n    Find(expression: (action: IAction) => boolean): Collections.IEnumerable<IAction>;\r\n    FindOne(name: string): IAction;\r\n}\r\n\r\n\r\nexport class ActionRepository implements IActionRepository {\r\n    readonly Actions = new Collections.List<IAction>();\r\n\r\n    Register(action: IAction): ActionRepository {\r\n        if (action) {\r\n            this.Actions.Add(action);\r\n        }\r\n        return this;\r\n    }\r\n\r\n    Find(expression: (action: IAction) => boolean): Collections.IEnumerable<IAction> {\r\n        return this.Actions.FindAll(expression);\r\n    }\r\n\r\n    FindOne(name: string): IAction {\r\n        return this.Actions.FirstOrDefault(x => x.Name === name);\r\n    }\r\n}","import { IAction } from './IAction';\r\n\r\nexport class Action implements IAction {\r\n    Name: string;\r\n    Group: string;\r\n    Tag: any;\r\n\r\n    constructor(private delegate: (args?: any) => void) { }\r\n\r\n    Invoke(args?: any): void {\r\n        if (this.delegate)\r\n            this.delegate(args);\r\n    }\r\n}","import { IMessageMediator } from './IMessageMediator';\r\nimport * as Actions from '../action/index';\r\nimport * as Collections from '../collections/index';\r\nimport { Injectable } from '@angular/core';\r\n\r\n@Injectable()\r\nexport class MessageMediator implements IMessageMediator {\r\n    private mediators = new Collections.Dictionary<string, Collections.Dictionary<string, Actions.IAction>>();\r\n\r\n    get Mediators(): Collections.Dictionary<string, Collections.Dictionary<string, Actions.IAction>> {\r\n        return this.mediators;\r\n    }\r\n\r\n    /**\r\n     * Register an event\r\n     */\r\n    RegisterHandler(topic: string, id: string, action: Actions.IAction): IMessageMediator {\r\n        let values = this.mediators.Item(topic);\r\n        if (values == null) {\r\n            values = new Collections.Dictionary<string, Actions.IAction>();\r\n            this.mediators.Add(topic, values);\r\n        }\r\n\r\n        values.Add(id, action);\r\n\r\n        return this;\r\n    }\r\n    /**\r\n     * Unregister an event \r\n     */\r\n    UnregisterHandler(topic: string, id: string): IMessageMediator {\r\n        let values = this.mediators.Item(topic);\r\n        if (values != null) {\r\n            values.Remove(id);\r\n            if (values.Count === 0) {\r\n                this.mediators.Remove(topic);\r\n            }\r\n        }\r\n        return this;\r\n    }\r\n    /**\r\n     * Trigger an event with given parameter\r\n     */\r\n    SendMessage(topic: string, param?: any): boolean;\r\n    SendMessage<T>(topic: string, message?: T): boolean {\r\n\r\n        let result = true;\r\n        let values = this.mediators.Item(topic);\r\n        if (values != null) {\r\n            for (let item of values.Values()) {\r\n                try {\r\n                    item.Invoke(message);\r\n                } catch (error) {\r\n                    result = false;\r\n                }\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n}","import { Injectable, ViewContainerRef, ComponentFactoryResolver, ComponentRef, Type, InjectionToken } from '@angular/core';\r\nimport { IComponentCreator } from './IComponentCreator';\r\n\r\nexport const ComponentCreatorToken = new InjectionToken('./ICommponentCreator');\r\n\r\n@Injectable()\r\nexport class ComponentCreator implements IComponentCreator {\r\n\r\n    private mViewContainer: ViewContainerRef;\r\n    private mComponentFactoryResolver: ComponentFactoryResolver;\r\n\r\n    get ViewContainer(): ViewContainerRef {\r\n        return this.mViewContainer;\r\n    }\r\n    set ViewContainer(value: ViewContainerRef) {\r\n        this.mViewContainer = value;\r\n    }\r\n\r\n    get ComponentFactoryResolver(): ComponentFactoryResolver {\r\n        return this.mComponentFactoryResolver;\r\n    }\r\n    set ComponentFactoryResolver(value: ComponentFactoryResolver) {\r\n        this.mComponentFactoryResolver = value;\r\n    }\r\n\r\n    /**\r\n    * Initialize\r\n    */\r\n    Initialize(viewContainer: ViewContainerRef, resolver: ComponentFactoryResolver): void {\r\n        this.mViewContainer = viewContainer;\r\n        this.mComponentFactoryResolver = resolver;\r\n    }\r\n\r\n\r\n    CreateComponent(componentType: Type<{}>, viewContainer?: ViewContainerRef): ComponentRef<{}> {\r\n        try {\r\n            let factory = this.ComponentFactoryResolver.resolveComponentFactory(componentType);\r\n\r\n            let component = viewContainer ?\r\n                viewContainer.createComponent(factory) :\r\n                this.ViewContainer.createComponent(factory);\r\n\r\n            return component;\r\n        } catch (error) {\r\n            return null;\r\n        }\r\n    }\r\n}\r\n","\r\nimport { NgModule, Optional, SkipSelf } from '@angular/core';\r\nimport { HttpModule, JsonpModule } from '@angular/http';\r\nimport { CommonModule } from '@angular/common';\r\n\r\nimport * as Common from './components';\r\n\r\nconst components = [\r\n\r\n];\r\n\r\nconst directives = [\r\n    Common.InvokeCommandDirective\r\n];\r\n\r\nconst providers = [\r\n    Common.DefaultLoggerFactory,\r\n    Common.HttpClient,\r\n    Common.LoggingExceptionHandler,\r\n    Common.CommandRepository,\r\n    Common.CommandDescriptorRepository,\r\n    Common.ElectronUtil,\r\n    Common.AngularServiceProvider,\r\n    Common.ServiceLocator,\r\n    Common.MessageMediator,\r\n    Common.ComponentCreator,\r\n    Common.OptionRepository,\r\n\r\n    { provide: Common.ActionRepositoryToken, useClass: Common.ActionRepository },\r\n    { provide: Common.CommandRepositoryToken, useClass: Common.CommandRepository },\r\n    { provide: Common.CommandDescriptorRepositoryToken, useClass: Common.CommandDescriptorRepository },\r\n    { provide: Common.ExceptionHandlerToken, useClass: Common.LoggingExceptionHandler },\r\n    { provide: Common.LoggerFactoryToken, useClass: Common.DefaultLoggerFactory },\r\n    { provide: Common.MessageMediatorToken, useClass: Common.MessageMediator },\r\n    { provide: Common.ComponentCreatorToken, useClass: Common.ComponentCreator },\r\n    { provide: Common.OptionRepositoryToken, useClass: Common.OptionRepository },\r\n    { provide: Common.WindowSizeWatcherToken, useClass: Common.WindowSizeWatcher }\r\n];\r\n\r\nconst exportItems = [];\r\n\r\n@NgModule({\r\n    declarations: [directives, components],\r\n    imports: [CommonModule, HttpModule, JsonpModule],\r\n    providers: providers,\r\n    exports: [directives, exportItems]\r\n})\r\nexport class SystemModule {\r\n\r\n    // constructor(@Optional() @SkipSelf() parentModule: SystemModule) {\r\n    //     if (parentModule) {\r\n    //         throw new Error('SystemModule is already loaded. Import it in the AppModule only');\r\n    //     }\r\n    // }\r\n}"]}