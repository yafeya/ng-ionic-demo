/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
Array.prototype.Add = function (item) {
    this.push(item);
};
Array.prototype.Empty = function () {
    return this.splice(0, this.length);
};
Array.prototype.IsEmpty = function () {
    if (this.length === 0) {
        return true;
    }
    return false;
};
Array.prototype.ElementAt = function (index) {
    return this[index];
};
Array.prototype.FirstOrDefault = function (predicate) {
    /** @type {?} */
    let result = null;
    if (predicate) {
        for (let item of this) {
            if (predicate(item)) {
                result = item;
                break;
            }
        }
    }
    else {
        result = this[0];
    }
    return result;
};
Array.prototype.Max = function () {
    /** @type {?} */
    let max = this.reduce(function (a, b) {
        return Math.max(a, b);
    });
    return max;
};
Array.prototype.Min = function () {
    /** @type {?} */
    let min = this.reduce(function (a, b) {
        return Math.min(a, b);
    });
    return min;
};
Array.prototype.Count = function () {
    return this.length;
};
Array.prototype.Any = function (predicate) {
    if (predicate) {
        for (let item of this) {
            if (predicate(item))
                return true;
        }
        return false;
    }
    else {
        if (this.length === 0) {
            return false;
        }
        return true;
    }
};
Array.prototype.Where = function (predicate) {
    return this.filter(x => {
        return predicate(x);
    });
};
Array.prototype.Select = function (selector) {
    /** @type {?} */
    let result = [];
    for (let item of this) {
        result.push(selector(item));
    }
    return result;
};
Array.prototype.OrderBy = function (keySelector) {
    return this.sort(function (a, b) {
        return keySelector(a) > keySelector(b);
    });
};
Array.prototype.OrderByDescending = function (keySelector) {
    return this.sort(function (a, b) {
        return keySelector(b) - keySelector(a);
    });
};
Array.prototype.ForEach = function (callback) {
    for (let i = 0; i < this.length; i++) {
        callback(i, this[i]);
    }
};
Array.prototype.Remove = function (item) {
    /** @type {?} */
    let index = this.indexOf(item);
    if (index !== -1) {
        return this.splice(index, 1);
    }
    return null;
};
Array.prototype.Contains = function (partial, strict) {
    for (let i = 0; i < this.length; i++) {
        if (!strict && this[i].contains(partial)) {
            return true;
        }
        if (strict && this[i] === partial) {
            return true;
        }
    }
    return false;
};
Array.prototype.IndexOfPartial = function (partial) {
    for (let i = 0; i < this.length; i++) {
        if (this[i].contains(partial)) {
            return i;
        }
    }
    return -1;
};
/*
 * There are frameworks that auto-generate JSON based on data schemas, but sometimes they
 * return data in inconsistent ways. For example, an array of strings might be returned
 * instead of an array of objects containing strings, etc. because the underlying data at the time
 * only cotains the string value, but when other data is present (in the database, etc.),
 * it will return the object array. Certain convenience methods are necessary to force proper formatting.
 */
Array.prototype.ToObjectArray = function (objName) {
    if (objName === undefined || objName === null) {
        throw new Error('Error: Property name must be provided for conversion.');
    }
    /** @type {?} */
    let items = this;
    if (typeof (items[0]) === 'string' || typeof (items[0]) === 'number' || typeof (items[0]) === 'boolean') {
        for (let i = 0; i < items.length; i++) {
            /** @type {?} */
            let val = items[i];
            items[i] = {};
            items[i][objName] = val;
        }
        return items;
    }
    else {
        return this;
    }
};

//# sourceMappingURL=data:application/json;base64,