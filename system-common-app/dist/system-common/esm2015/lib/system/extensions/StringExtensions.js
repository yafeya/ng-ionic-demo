/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
/**
 * @record
 */
function StringConstructor() { }
/** @type {?} */
StringConstructor.prototype.IsNullOrEmpty;
/** @type {?} */
StringConstructor.prototype.IsValid;
/** @type {?} */
StringConstructor.prototype.Empty;
String.prototype.ToLower = function () {
    return this.toLowerCase();
};
String.prototype.ToUpper = function () {
    return this.toUpperCase();
};
String.prototype.Trim = function () {
    return this.replace(/^\s+|\s+$/g, '');
};
String.prototype.Normalize = function () {
    return this.replace(/^\s*|\s(?=\s)|\s*$/g, '');
};
String.prototype.StartsWith = function (part) {
    return this.slice(0, part.length) === part;
};
String.prototype.EndsWith = function (part) {
    return this.slice(part.length) === part;
};
String.prototype.CapFirst = function () {
    if (this.length === 1) {
        return this.toUpperCase();
    }
    else if (this.length > 0) {
        /** @type {?} */
        let regex = /^(\(|\[|'|')/;
        if (regex.test(this)) {
            return this.substring(0, 2).toUpperCase() + this.substring(2);
        }
        else {
            return this.substring(0, 1).toUpperCase() + this.substring(1);
        }
    }
    return null;
};
String.prototype.CapWords = function () {
    /** @type {?} */
    let regexp = /\s/;
    /** @type {?} */
    let words = this.split(regexp);
    if (words.length === 1) {
        return words[0].capFirst();
    }
    else if (words.length > 1) {
        /** @type {?} */
        let result = '';
        for (let i = 0; i < words.length; i++) {
            if (words[i].capFirst() !== null) {
                result += words[i].capFirst() + ' ';
            }
        }
        result.trim();
        return result;
    }
    return null;
};
String.prototype.TruncateWords = function (num) {
    /** @type {?} */
    let words = this.split(/\s+/);
    if (words.length > num) {
        return words.slice(0, num).join(' ');
    }
    return words.join(' ');
};
String.prototype.StripHtml = function () {
    /** @type {?} */
    let content = this.replace(/<[\/]?([^> ]+)[^>]*>/g, '');
    content = content.replace(/<style[^>]*>[\s\S]*?<\/style>/ig, '');
    content = content.replace(/<script[^>]*>[\s\S]*?<\/script>/ig, '');
    content = content.replace(/<!--[\s\S]*?-->/g, '');
    content = content.replace('&nbsp;', ' ');
    content = content.replace('&amp;', '&');
    return content;
};
String.prototype.EscapeHtml = function () {
    /** @type {?} */
    let content = this.replace(/'/g, '&quot;');
    content.replace(/&(?!\w+;)/g, '&amp;');
    content.replace(/>/g, '&gt;');
    content.replace(/</g, '&lt;');
    return content;
};
String.prototype.Contains = function (val) {
    if (this.indexOf(val) !== -1) {
        return true;
    }
    return false;
};
String.prototype.Slugify = function (lower = true) {
    if (!lower) {
        return this.lower().normalize().replace(/[^a-z0-9]/gi, '-');
    }
    return this.normalize().replace(/[^a-z0-9]/gi, '-');
};
String.prototype.HtmlToText = function () {
    /** @type {?} */
    const output = this.replace(/<[^>]*>?/g, '');
    return output;
};
String.prototype.CountWord = function () {
    /** @type {?} */
    let content = this;
    if (!content)
        return 0;
    /** @type {?} */
    let words = '';
    /** @type {?} */
    let symbols = '';
    content.replace(/([\w\s]*)([^\w;,.''{}\[\]+_)(*&\^%$#@!~\/?]*)/g, (a, b, c) => {
        words += b;
        symbols += c;
        return a;
    });
    /** @type {?} */
    let count = words.trim().split(' ').length;
    if (symbols)
        count += symbols.replace(' ', '').split('').length;
    return count;
};
String.prototype.ValidateEmail = function () {
    /** @type {?} */
    let re = /^(([^<>()\[\]\\.,;:\s@"]+(\.[^<>()\[\]\\.,;:\s@"]+)*)|(".+"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/;
    return re.test(this);
};
String.prototype.IndexOf = function (value) {
    return this.indexOf(value);
};
String.prototype.LastIndexOf = function (value) {
    return this.lastIndexOf(value);
};
String.prototype.SubString = function (start, length) {
    return this.substring(start, length);
};
String.IsNullOrEmpty = function (value) {
    if (value === undefined || value === null) {
        return true;
    }
    /** @type {?} */
    let text = value.toString();
    if (text === '') {
        return true;
    }
    if (text && text.trim() === '') {
        return true;
    }
    return false;
};
String.IsValid = function (value) {
    return !String.IsNullOrEmpty(value);
};
String.Empty = function () {
    return '';
};

//# sourceMappingURL=data:application/json;base64,