/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
Document.prototype.SelectOne = function (selector) {
    return document.querySelector(selector);
};
Document.prototype.SelectAll = function (selector) {
    return document.querySelectorAll(selector);
};
Document.prototype.Create = function (html) {
    /** @type {?} */
    let placeholder = document.createElement('div');
    placeholder.innerHTML = html;
    return /** @type {?} */ (placeholder.childNodes[0]);
};
NodeList.prototype.ForEach = function (callback) {
    for (let i = 0; i < this.length; i++) {
        callback(i, this[i]);
    }
};
NodeList.prototype.Last = function () {
    return this[this.length - 1];
};
Element.prototype.SelectOne = function (selector) {
    return this.querySelector(selector);
};
Element.prototype.SelectAll = function (selector) {
    return this.querySelectorAll(selector);
};
Element.prototype.Attribute = function (name, value) {
    if (value != null) {
        this.setAttribute(name, value);
        return this;
    }
    return this.getAttribute(name);
};
Element.prototype.Parent = function () {
    return this.parentNode;
};
Element.prototype.HasMatches = function (selector) {
    if ((/** @type {?} */ (this)).matches != null) {
        return (/** @type {?} */ (this)).matches(selector);
    }
    else if ((/** @type {?} */ (this)).msMatchesSelector != null) {
        return (/** @type {?} */ (this)).msMatchesSelector(selector);
    }
    return false;
};
Element.prototype.Up = function (selector) {
    /** @type {?} */
    let el = this;
    if ((/** @type {?} */ (el)).closest != null) {
        return (/** @type {?} */ (el)).closest(selector);
    }
    else {
        while (el) {
            if (el.HasMatches(selector)) {
                return /** @type {?} */ (el);
            }
            el = el.parentElement;
        }
    }
};
Element.prototype.First = function (selector) {
    /**
     * @param {?} node
     * @return {?}
     */
    function _decend(node) {
        /** @type {?} */
        let _currentNode = node;
        /** @type {?} */
        let nodeList = _currentNode.childNodes;
        for (let i = 0; i < nodeList.length; i++) {
            if (nodeList[i].nodeName.ToLower() === selector.ToLower()) {
                return /** @type {?} */ (nodeList[i]);
            }
        }
        _decend(_currentNode);
    }
    return _decend(this);
};
Element.prototype.Append = function (html) {
    this.insertAdjacentHTML('beforeend', html);
    return this;
};
Element.prototype.Empty = function () {
    this.innerHTML = '';
    return this;
};
Element.prototype.Drop = function () {
    /** @type {?} */
    let self = this;
    /** @type {?} */
    let parent = self.parentNode;
    parent.removeChild(self);
    return self;
};
Element.prototype.RemoveEvent = function (event) {
    /** @type {?} */
    let evt = this[`on${event}`] || this[`${event}`];
    try {
        this.removeEventListener(event, evt);
    }
    catch (e) { }
    try {
        this.detachEvent(`on${event}`, evt);
    }
    catch (e) { }
    this[`on${event}`] = null;
    this[`${event}`] = null;
    return this;
};
Element.prototype.AddEvent = function (event, callback, overwrite = false) {
    if (overwrite) {
        this[`on${event}`] = callback;
    }
    else {
        this.addEventListener(event, callback);
    }
    return this;
};
Element.prototype.Show = function (t = 'block') {
    /** @type {?} */
    let styles = this.attribute('style');
    if (styles != null && styles !== '') {
        return this.attribute('style', styles.setValueByKey('display', t));
    }
    return this.attribute('style', `display:${t}`);
};
Element.prototype.Hide = function () {
    /** @type {?} */
    let styles = this.attribute('style');
    if (styles != null && styles !== '') {
        return this.attribute('style', styles.setValueByKey('display', 'none'));
    }
    return this.attribute('style', `display:none;`);
};
Element.prototype.Toggle = function () {
    if (!(this.offsetWidth || this.offsetHeight || this.getClientRects().length)) {
        return this.show();
    }
    else {
        return this.hide();
    }
};
Element.prototype.AddClass = function (className) {
    this.className += ` ${className}`;
    this.className = this.className.trim();
    return this;
};
Element.prototype.RemoveClass = function (className) {
    this.className = (/** @type {?} */ (this.className)).replace(className, '').normalize();
    return this;
};
Element.prototype.AsString = function () {
    return this.outerHTML;
};
Element.prototype.IsHidden = function () {
    return (this.offsetParent === null);
};
HTMLElement.prototype.Clean = function () {
    this.value = this.value.replace(/\r?\n/g, '\r\n');
    return this;
};
HTMLElement.prototype.Value = function (val) {
    if (val != null) {
        if (this.nodeName.lower() === 'textarea') {
            this.innerHTML = val;
            try {
                this.innerText = val;
            }
            catch (e) { }
            try {
                this.value = val;
            }
            catch (e) { }
        }
        else if (this.nodeName.lower() === 'input') {
            switch (this.attribute('type').lower()) {
                case 'file':
                    break;
                case 'checkbox':
                    if (/** @type {?} */ (/** @type {?} */ (val))) {
                        this.checked = true;
                    }
                    else {
                        this.checked = false;
                    }
                    break;
                case 'radio':
                    /** @type {?} */
                    let name = this.attribute('name');
                    /** @type {?} */
                    let radios = document.SelectAll(`input[type='radio'][name='${name}']`);
                    radios.ForEach(function (idx, elem) {
                        if (elem.Attribute('value') === val) {
                            (/** @type {?} */ (elem)).checked = true;
                        }
                        else {
                            (/** @type {?} */ (elem)).checked = false;
                        }
                    });
                    break;
                default:
                    this.value = val;
                    break;
            }
        }
        else if (this.nodeName.lower() === 'select') {
            for (let i = 0; i < this.options.length; i++) {
                if (this.options[i].value === val) {
                    this.selectedIndex = i;
                    break;
                }
            }
        }
    }
    else {
        if (this.nodeName.lower() === 'textarea') {
            try {
                return this.value;
            }
            catch (e) { }
            if (this.innerText != null && (/** @type {?} */ (this.innerText)).trim() !== '') {
                return this.innerText;
            }
            else if (this.innerHTML != null && (/** @type {?} */ (this.innerHTML)).trim() !== '') {
                return this.innerHTML;
            }
            return null;
        }
        else if (this.nodeName.lower() === 'input') {
            switch (this.attribute('type').lower()) {
                case 'checkbox':
                    return this.checked;
                case 'radio':
                    /** @type {?} */
                    let name = this.attribute('name');
                    return (/** @type {?} */ (document.SelectOne(`input[type='radio'][name='${name}']:checked`))).value;
                default:
                    return this.value;
            }
        }
        else if (this.nodeName.lower() === 'select') {
            return this.options[this.selectedIndex].value;
        }
    }
    return val;
};

//# sourceMappingURL=data:application/json;base64,