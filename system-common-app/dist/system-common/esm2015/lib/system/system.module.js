/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { NgModule } from '@angular/core';
import { HttpModule, JsonpModule } from '@angular/http';
import { CommonModule } from '@angular/common';
import * as Common from './components';
/** @type {?} */
const components = [];
/** @type {?} */
const directives = [
    Common.InvokeCommandDirective
];
/** @type {?} */
const providers = [
    Common.DefaultLoggerFactory,
    Common.HttpClient,
    Common.LoggingExceptionHandler,
    Common.CommandRepository,
    Common.CommandDescriptorRepository,
    Common.ElectronUtil,
    Common.AngularServiceProvider,
    Common.ServiceLocator,
    Common.MessageMediator,
    Common.ComponentCreator,
    Common.OptionRepository,
    { provide: Common.ActionRepositoryToken, useClass: Common.ActionRepository },
    { provide: Common.CommandRepositoryToken, useClass: Common.CommandRepository },
    { provide: Common.CommandDescriptorRepositoryToken, useClass: Common.CommandDescriptorRepository },
    { provide: Common.ExceptionHandlerToken, useClass: Common.LoggingExceptionHandler },
    { provide: Common.LoggerFactoryToken, useClass: Common.DefaultLoggerFactory },
    { provide: Common.MessageMediatorToken, useClass: Common.MessageMediator },
    { provide: Common.ComponentCreatorToken, useClass: Common.ComponentCreator },
    { provide: Common.OptionRepositoryToken, useClass: Common.OptionRepository },
    { provide: Common.WindowSizeWatcherToken, useClass: Common.WindowSizeWatcher }
];
/** @type {?} */
const exportItems = [];
export class SystemModule {
}
SystemModule.decorators = [
    { type: NgModule, args: [{
                declarations: [directives, components],
                imports: [CommonModule, HttpModule, JsonpModule],
                providers: providers,
                exports: [directives, exportItems]
            },] }
];

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoic3lzdGVtLm1vZHVsZS5qcyIsInNvdXJjZVJvb3QiOiJuZzovL3lhZmV5YS1zeXN0ZW0tY29tbW9uLyIsInNvdXJjZXMiOlsibGliL3N5c3RlbS9zeXN0ZW0ubW9kdWxlLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUFDQSxPQUFPLEVBQUUsUUFBUSxFQUFzQixNQUFNLGVBQWUsQ0FBQztBQUM3RCxPQUFPLEVBQUUsVUFBVSxFQUFFLFdBQVcsRUFBRSxNQUFNLGVBQWUsQ0FBQztBQUN4RCxPQUFPLEVBQUUsWUFBWSxFQUFFLE1BQU0saUJBQWlCLENBQUM7QUFFL0MsT0FBTyxLQUFLLE1BQU0sTUFBTSxjQUFjLENBQUM7O0FBRXZDLE1BQU0sVUFBVSxHQUFHLEVBRWxCLENBQUM7O0FBRUYsTUFBTSxVQUFVLEdBQUc7SUFDZixNQUFNLENBQUMsc0JBQXNCO0NBQ2hDLENBQUM7O0FBRUYsTUFBTSxTQUFTLEdBQUc7SUFDZCxNQUFNLENBQUMsb0JBQW9CO0lBQzNCLE1BQU0sQ0FBQyxVQUFVO0lBQ2pCLE1BQU0sQ0FBQyx1QkFBdUI7SUFDOUIsTUFBTSxDQUFDLGlCQUFpQjtJQUN4QixNQUFNLENBQUMsMkJBQTJCO0lBQ2xDLE1BQU0sQ0FBQyxZQUFZO0lBQ25CLE1BQU0sQ0FBQyxzQkFBc0I7SUFDN0IsTUFBTSxDQUFDLGNBQWM7SUFDckIsTUFBTSxDQUFDLGVBQWU7SUFDdEIsTUFBTSxDQUFDLGdCQUFnQjtJQUN2QixNQUFNLENBQUMsZ0JBQWdCO0lBRXZCLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLGdCQUFnQixFQUFFO0lBQzVFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxzQkFBc0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLGlCQUFpQixFQUFFO0lBQzlFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxnQ0FBZ0MsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLDJCQUEyQixFQUFFO0lBQ2xHLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxxQkFBcUIsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLHVCQUF1QixFQUFFO0lBQ25GLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxrQkFBa0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLG9CQUFvQixFQUFFO0lBQzdFLEVBQUUsT0FBTyxFQUFFLE1BQU0sQ0FBQyxvQkFBb0IsRUFBRSxRQUFRLEVBQUUsTUFBTSxDQUFDLGVBQWUsRUFBRTtJQUMxRSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtJQUM1RSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMscUJBQXFCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsRUFBRTtJQUM1RSxFQUFFLE9BQU8sRUFBRSxNQUFNLENBQUMsc0JBQXNCLEVBQUUsUUFBUSxFQUFFLE1BQU0sQ0FBQyxpQkFBaUIsRUFBRTtDQUNqRixDQUFDOztBQUVGLE1BQU0sV0FBVyxHQUFHLEVBQUUsQ0FBQztBQVF2QixNQUFNOzs7WUFOTCxRQUFRLFNBQUM7Z0JBQ04sWUFBWSxFQUFFLENBQUMsVUFBVSxFQUFFLFVBQVUsQ0FBQztnQkFDdEMsT0FBTyxFQUFFLENBQUMsWUFBWSxFQUFFLFVBQVUsRUFBRSxXQUFXLENBQUM7Z0JBQ2hELFNBQVMsRUFBRSxTQUFTO2dCQUNwQixPQUFPLEVBQUUsQ0FBQyxVQUFVLEVBQUUsV0FBVyxDQUFDO2FBQ3JDIiwic291cmNlc0NvbnRlbnQiOlsiXHJcbmltcG9ydCB7IE5nTW9kdWxlLCBPcHRpb25hbCwgU2tpcFNlbGYgfSBmcm9tICdAYW5ndWxhci9jb3JlJztcclxuaW1wb3J0IHsgSHR0cE1vZHVsZSwgSnNvbnBNb2R1bGUgfSBmcm9tICdAYW5ndWxhci9odHRwJztcclxuaW1wb3J0IHsgQ29tbW9uTW9kdWxlIH0gZnJvbSAnQGFuZ3VsYXIvY29tbW9uJztcclxuXHJcbmltcG9ydCAqIGFzIENvbW1vbiBmcm9tICcuL2NvbXBvbmVudHMnO1xyXG5cclxuY29uc3QgY29tcG9uZW50cyA9IFtcclxuXHJcbl07XHJcblxyXG5jb25zdCBkaXJlY3RpdmVzID0gW1xyXG4gICAgQ29tbW9uLkludm9rZUNvbW1hbmREaXJlY3RpdmVcclxuXTtcclxuXHJcbmNvbnN0IHByb3ZpZGVycyA9IFtcclxuICAgIENvbW1vbi5EZWZhdWx0TG9nZ2VyRmFjdG9yeSxcclxuICAgIENvbW1vbi5IdHRwQ2xpZW50LFxyXG4gICAgQ29tbW9uLkxvZ2dpbmdFeGNlcHRpb25IYW5kbGVyLFxyXG4gICAgQ29tbW9uLkNvbW1hbmRSZXBvc2l0b3J5LFxyXG4gICAgQ29tbW9uLkNvbW1hbmREZXNjcmlwdG9yUmVwb3NpdG9yeSxcclxuICAgIENvbW1vbi5FbGVjdHJvblV0aWwsXHJcbiAgICBDb21tb24uQW5ndWxhclNlcnZpY2VQcm92aWRlcixcclxuICAgIENvbW1vbi5TZXJ2aWNlTG9jYXRvcixcclxuICAgIENvbW1vbi5NZXNzYWdlTWVkaWF0b3IsXHJcbiAgICBDb21tb24uQ29tcG9uZW50Q3JlYXRvcixcclxuICAgIENvbW1vbi5PcHRpb25SZXBvc2l0b3J5LFxyXG5cclxuICAgIHsgcHJvdmlkZTogQ29tbW9uLkFjdGlvblJlcG9zaXRvcnlUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5BY3Rpb25SZXBvc2l0b3J5IH0sXHJcbiAgICB7IHByb3ZpZGU6IENvbW1vbi5Db21tYW5kUmVwb3NpdG9yeVRva2VuLCB1c2VDbGFzczogQ29tbW9uLkNvbW1hbmRSZXBvc2l0b3J5IH0sXHJcbiAgICB7IHByb3ZpZGU6IENvbW1vbi5Db21tYW5kRGVzY3JpcHRvclJlcG9zaXRvcnlUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5Db21tYW5kRGVzY3JpcHRvclJlcG9zaXRvcnkgfSxcclxuICAgIHsgcHJvdmlkZTogQ29tbW9uLkV4Y2VwdGlvbkhhbmRsZXJUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5Mb2dnaW5nRXhjZXB0aW9uSGFuZGxlciB9LFxyXG4gICAgeyBwcm92aWRlOiBDb21tb24uTG9nZ2VyRmFjdG9yeVRva2VuLCB1c2VDbGFzczogQ29tbW9uLkRlZmF1bHRMb2dnZXJGYWN0b3J5IH0sXHJcbiAgICB7IHByb3ZpZGU6IENvbW1vbi5NZXNzYWdlTWVkaWF0b3JUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5NZXNzYWdlTWVkaWF0b3IgfSxcclxuICAgIHsgcHJvdmlkZTogQ29tbW9uLkNvbXBvbmVudENyZWF0b3JUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5Db21wb25lbnRDcmVhdG9yIH0sXHJcbiAgICB7IHByb3ZpZGU6IENvbW1vbi5PcHRpb25SZXBvc2l0b3J5VG9rZW4sIHVzZUNsYXNzOiBDb21tb24uT3B0aW9uUmVwb3NpdG9yeSB9LFxyXG4gICAgeyBwcm92aWRlOiBDb21tb24uV2luZG93U2l6ZVdhdGNoZXJUb2tlbiwgdXNlQ2xhc3M6IENvbW1vbi5XaW5kb3dTaXplV2F0Y2hlciB9XHJcbl07XHJcblxyXG5jb25zdCBleHBvcnRJdGVtcyA9IFtdO1xyXG5cclxuQE5nTW9kdWxlKHtcclxuICAgIGRlY2xhcmF0aW9uczogW2RpcmVjdGl2ZXMsIGNvbXBvbmVudHNdLFxyXG4gICAgaW1wb3J0czogW0NvbW1vbk1vZHVsZSwgSHR0cE1vZHVsZSwgSnNvbnBNb2R1bGVdLFxyXG4gICAgcHJvdmlkZXJzOiBwcm92aWRlcnMsXHJcbiAgICBleHBvcnRzOiBbZGlyZWN0aXZlcywgZXhwb3J0SXRlbXNdXHJcbn0pXHJcbmV4cG9ydCBjbGFzcyBTeXN0ZW1Nb2R1bGUge1xyXG5cclxuICAgIC8vIGNvbnN0cnVjdG9yKEBPcHRpb25hbCgpIEBTa2lwU2VsZigpIHBhcmVudE1vZHVsZTogU3lzdGVtTW9kdWxlKSB7XHJcbiAgICAvLyAgICAgaWYgKHBhcmVudE1vZHVsZSkge1xyXG4gICAgLy8gICAgICAgICB0aHJvdyBuZXcgRXJyb3IoJ1N5c3RlbU1vZHVsZSBpcyBhbHJlYWR5IGxvYWRlZC4gSW1wb3J0IGl0IGluIHRoZSBBcHBNb2R1bGUgb25seScpO1xyXG4gICAgLy8gICAgIH1cclxuICAgIC8vIH1cclxufSJdfQ==