/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
import { Enumerable } from './Enumerable';
import { List } from './List';
import { ObservableCollection } from './ObservableCollection';
import { Grouping } from './IGrouping';
import { Dictionary } from './Dictionary';
/**
 * Do ForEach on items
 * @template T
 * @this {?}
 * @param {?} action
 * @return {?}
 */
export function ForEach(action) {
    if (!action) {
        throw new Error(`Argument 'item' is null.`);
    }
    for (let item of this.Items) {
        action(item);
    }
}
/**
 * Sort items by given comparer
 * @template T
 * @this {?}
 * @param {?} comparer
 * @return {?}
 */
export function Sort(comparer) {
    if (!comparer)
        throw new Error(`Argument 'comparer' is null.`);
    this.Items = this.Items.sort(comparer);
}
/**
 * Find items by given predicate
 * @template T
 * @this {?}
 * @param {?} predicate
 * @return {?}
 */
export function FindAll(predicate) {
    if (!predicate)
        throw new Error(`Argument 'predicate' is null.`);
    /** @type {?} */
    let result = new List();
    for (let item of this.Items) {
        if (predicate(item))
            result.Add(item);
    }
    return Enumerable.From(result.Items);
}
/**
 * Find first item in the list
 * @template T
 * @this {?}
 * @param {?=} predicate
 * @return {?}
 */
export function FirstOrDefault(predicate) {
    /** @type {?} */
    let result;
    result = this.Items.FirstOrDefault(predicate);
    return result;
}
/**
 * @template T
 * @this {?}
 * @return {?}
 */
export function IsEmpty() {
    return !(this.Items && this.Items.length > 0);
}
/**
 * @template T
 * @this {?}
 * @param {?=} predicate
 * @return {?}
 */
export function Any(predicate) {
    if (predicate) {
        for (let item of this.Items) {
            if (predicate(item))
                return true;
        }
        return false;
    }
    else {
        if (this.Items.length === 0) {
            return false;
        }
        return true;
    }
}
/**
 * @template T
 * @this {?}
 * @param {?} selector
 * @return {?}
 */
export function Max(selector) {
    /** @type {?} */
    let max = this.Select(selector).Items.reduce(function (a, b) {
        return Math.max(a, b);
    });
    return max;
}
/**
 * @template T
 * @this {?}
 * @param {?} selector
 * @return {?}
 */
export function Min(selector) {
    /** @type {?} */
    let min = this.Select(selector).Items.reduce(function (a, b) {
        return Math.min(a, b);
    });
    return min;
}
/**
 * @template T
 * @this {?}
 * @param {?} keySelector
 * @return {?}
 */
export function OrderBy(keySelector) {
    /** @type {?} */
    let values = this.Items.sort(function (a, b) {
        return keySelector(a) - keySelector(b);
    });
    return Enumerable.From(values);
}
/**
 * @template T
 * @this {?}
 * @param {?} keySelector
 * @return {?}
 */
export function OrderByDescending(keySelector) {
    /** @type {?} */
    let values = this.Items.sort(function (a, b) {
        return keySelector(b) - keySelector(a);
    });
    return Enumerable.From(values);
}
/**
 * @template T
 * @this {?}
 * @param {?} predicate
 * @return {?}
 */
export function Where(predicate) {
    /** @type {?} */
    let values = this.Items.filter((x) => {
        return predicate(x);
    });
    return Enumerable.From(values);
}
/**
 * @template TSource, TResult
 * @this {?}
 * @param {?} selector
 * @return {?}
 */
export function Select(selector) {
    /** @type {?} */
    let result = [];
    for (let item of this.Items) {
        result.push(selector(item));
    }
    return Enumerable.From(result);
}
/**
 * @template T
 * @this {?}
 * @param {?} index
 * @return {?}
 */
export function ElementAt(index) {
    /** @type {?} */
    let values = this.Items;
    return values[index];
}
/**
 * @template T, TKey, TElement
 * @this {?}
 * @param {?} keySelector
 * @param {?=} valueSelector
 * @return {?}
 */
export function GroupBy(keySelector, valueSelector) {
    if (!this)
        throw new Error(`Parameter is null`);
    if (!keySelector)
        throw new Error(`Parameter 'keySelelctor'is null`);
    if (!valueSelector)
        valueSelector = x => x;
    /** @type {?} */
    let dictionary = new Dictionary();
    this.ForEach(x => {
        /** @type {?} */
        let key = keySelector(x);
        /** @type {?} */
        let value = valueSelector ? valueSelector(x) : x;
        /** @type {?} */
        let values;
        if (dictionary.ContainsKey(key)) {
            /** @type {?} */
            let item = dictionary.Item(key);
            values = item ? item : new List();
        }
        else {
            values = new List();
            dictionary.Add(key, values);
        }
        values.Add(value);
    });
    /** @type {?} */
    let groups = new List();
    dictionary.ForEach(x => {
        groups.Add(new Grouping(x.Key, x.Value));
    });
    return groups;
}
Enumerable.prototype.ForEach = ForEach;
Enumerable.prototype.Sort = Sort;
Enumerable.prototype.FindAll = FindAll;
Enumerable.prototype.FirstOrDefault = FirstOrDefault;
Enumerable.prototype.IsEmpty = IsEmpty;
Enumerable.prototype.Any = Any;
Enumerable.prototype.Max = Max;
Enumerable.prototype.Min = Min;
Enumerable.prototype.OrderBy = OrderBy;
Enumerable.prototype.OrderByDescending = OrderByDescending;
Enumerable.prototype.Where = Where;
Enumerable.prototype.Select = Select;
Enumerable.prototype.ElementAt = ElementAt;
Enumerable.prototype.GroupBy = GroupBy;
ObservableCollection.prototype.ForEach = ForEach;
ObservableCollection.prototype.Sort = Sort;
ObservableCollection.prototype.FindAll = FindAll;
ObservableCollection.prototype.FirstOrDefault = FirstOrDefault;
ObservableCollection.prototype.IsEmpty = IsEmpty;
ObservableCollection.prototype.Any = Any;
ObservableCollection.prototype.Max = Max;
ObservableCollection.prototype.Min = Min;
ObservableCollection.prototype.OrderBy = OrderBy;
ObservableCollection.prototype.OrderByDescending = OrderByDescending;
ObservableCollection.prototype.Where = Where;
ObservableCollection.prototype.Select = Select;
ObservableCollection.prototype.ElementAt = ElementAt;
ObservableCollection.prototype.GroupBy = GroupBy;

//# sourceMappingURL=data:application/json;base64,