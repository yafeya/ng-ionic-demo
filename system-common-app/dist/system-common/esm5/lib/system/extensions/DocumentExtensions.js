/**
 * @fileoverview added by tsickle
 * @suppress {checkTypes,extraRequire,uselessCode} checked by tsc
 */
Document.prototype.SelectOne = function (selector) {
    return document.querySelector(selector);
};
Document.prototype.SelectAll = function (selector) {
    return document.querySelectorAll(selector);
};
Document.prototype.Create = function (html) {
    /** @type {?} */
    var placeholder = document.createElement('div');
    placeholder.innerHTML = html;
    return /** @type {?} */ (placeholder.childNodes[0]);
};
NodeList.prototype.ForEach = function (callback) {
    for (var i = 0; i < this.length; i++) {
        callback(i, this[i]);
    }
};
NodeList.prototype.Last = function () {
    return this[this.length - 1];
};
Element.prototype.SelectOne = function (selector) {
    return this.querySelector(selector);
};
Element.prototype.SelectAll = function (selector) {
    return this.querySelectorAll(selector);
};
Element.prototype.Attribute = function (name, value) {
    if (value != null) {
        this.setAttribute(name, value);
        return this;
    }
    return this.getAttribute(name);
};
Element.prototype.Parent = function () {
    return this.parentNode;
};
Element.prototype.HasMatches = function (selector) {
    if ((/** @type {?} */ (this)).matches != null) {
        return (/** @type {?} */ (this)).matches(selector);
    }
    else if ((/** @type {?} */ (this)).msMatchesSelector != null) {
        return (/** @type {?} */ (this)).msMatchesSelector(selector);
    }
    return false;
};
Element.prototype.Up = function (selector) {
    /** @type {?} */
    var el = this;
    if ((/** @type {?} */ (el)).closest != null) {
        return (/** @type {?} */ (el)).closest(selector);
    }
    else {
        while (el) {
            if (el.HasMatches(selector)) {
                return /** @type {?} */ (el);
            }
            el = el.parentElement;
        }
    }
};
Element.prototype.First = function (selector) {
    /**
     * @param {?} node
     * @return {?}
     */
    function _decend(node) {
        /** @type {?} */
        var _currentNode = node;
        /** @type {?} */
        var nodeList = _currentNode.childNodes;
        for (var i = 0; i < nodeList.length; i++) {
            if (nodeList[i].nodeName.ToLower() === selector.ToLower()) {
                return /** @type {?} */ (nodeList[i]);
            }
        }
        _decend(_currentNode);
    }
    return _decend(this);
};
Element.prototype.Append = function (html) {
    this.insertAdjacentHTML('beforeend', html);
    return this;
};
Element.prototype.Empty = function () {
    this.innerHTML = '';
    return this;
};
Element.prototype.Drop = function () {
    /** @type {?} */
    var self = this;
    /** @type {?} */
    var parent = self.parentNode;
    parent.removeChild(self);
    return self;
};
Element.prototype.RemoveEvent = function (event) {
    /** @type {?} */
    var evt = this["on" + event] || this["" + event];
    try {
        this.removeEventListener(event, evt);
    }
    catch (e) { }
    try {
        this.detachEvent("on" + event, evt);
    }
    catch (e) { }
    this["on" + event] = null;
    this["" + event] = null;
    return this;
};
Element.prototype.AddEvent = function (event, callback, overwrite) {
    if (overwrite === void 0) { overwrite = false; }
    if (overwrite) {
        this["on" + event] = callback;
    }
    else {
        this.addEventListener(event, callback);
    }
    return this;
};
Element.prototype.Show = function (t) {
    if (t === void 0) { t = 'block'; }
    /** @type {?} */
    var styles = this.attribute('style');
    if (styles != null && styles !== '') {
        return this.attribute('style', styles.setValueByKey('display', t));
    }
    return this.attribute('style', "display:" + t);
};
Element.prototype.Hide = function () {
    /** @type {?} */
    var styles = this.attribute('style');
    if (styles != null && styles !== '') {
        return this.attribute('style', styles.setValueByKey('display', 'none'));
    }
    return this.attribute('style', "display:none;");
};
Element.prototype.Toggle = function () {
    if (!(this.offsetWidth || this.offsetHeight || this.getClientRects().length)) {
        return this.show();
    }
    else {
        return this.hide();
    }
};
Element.prototype.AddClass = function (className) {
    this.className += " " + className;
    this.className = this.className.trim();
    return this;
};
Element.prototype.RemoveClass = function (className) {
    this.className = (/** @type {?} */ (this.className)).replace(className, '').normalize();
    return this;
};
Element.prototype.AsString = function () {
    return this.outerHTML;
};
Element.prototype.IsHidden = function () {
    return (this.offsetParent === null);
};
HTMLElement.prototype.Clean = function () {
    this.value = this.value.replace(/\r?\n/g, '\r\n');
    return this;
};
HTMLElement.prototype.Value = function (val) {
    if (val != null) {
        if (this.nodeName.lower() === 'textarea') {
            this.innerHTML = val;
            try {
                this.innerText = val;
            }
            catch (e) { }
            try {
                this.value = val;
            }
            catch (e) { }
        }
        else if (this.nodeName.lower() === 'input') {
            switch (this.attribute('type').lower()) {
                case 'file':
                    break;
                case 'checkbox':
                    if (/** @type {?} */ (/** @type {?} */ (val))) {
                        this.checked = true;
                    }
                    else {
                        this.checked = false;
                    }
                    break;
                case 'radio':
                    /** @type {?} */
                    var name_1 = this.attribute('name');
                    /** @type {?} */
                    var radios = document.SelectAll("input[type='radio'][name='" + name_1 + "']");
                    radios.ForEach(function (idx, elem) {
                        if (elem.Attribute('value') === val) {
                            (/** @type {?} */ (elem)).checked = true;
                        }
                        else {
                            (/** @type {?} */ (elem)).checked = false;
                        }
                    });
                    break;
                default:
                    this.value = val;
                    break;
            }
        }
        else if (this.nodeName.lower() === 'select') {
            for (var i = 0; i < this.options.length; i++) {
                if (this.options[i].value === val) {
                    this.selectedIndex = i;
                    break;
                }
            }
        }
    }
    else {
        if (this.nodeName.lower() === 'textarea') {
            try {
                return this.value;
            }
            catch (e) { }
            if (this.innerText != null && (/** @type {?} */ (this.innerText)).trim() !== '') {
                return this.innerText;
            }
            else if (this.innerHTML != null && (/** @type {?} */ (this.innerHTML)).trim() !== '') {
                return this.innerHTML;
            }
            return null;
        }
        else if (this.nodeName.lower() === 'input') {
            switch (this.attribute('type').lower()) {
                case 'checkbox':
                    return this.checked;
                case 'radio':
                    /** @type {?} */
                    var name_2 = this.attribute('name');
                    return (/** @type {?} */ (document.SelectOne("input[type='radio'][name='" + name_2 + "']:checked"))).value;
                default:
                    return this.value;
            }
        }
        else if (this.nodeName.lower() === 'select') {
            return this.options[this.selectedIndex].value;
        }
    }
    return val;
};

//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiRG9jdW1lbnRFeHRlbnNpb25zLmpzIiwic291cmNlUm9vdCI6Im5nOi8veWFmZXlhLXN5c3RlbS1jb21tb24vIiwic291cmNlcyI6WyJsaWIvc3lzdGVtL2V4dGVuc2lvbnMvRG9jdW1lbnRFeHRlbnNpb25zLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7Ozs7QUF3Q0EsUUFBUSxDQUFDLFNBQVMsQ0FBQyxTQUFTLEdBQUcsVUFBVSxRQUFnQjtJQUNyRCxPQUFPLFFBQVEsQ0FBQyxhQUFhLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDM0MsQ0FBQztBQUVGLFFBQVEsQ0FBQyxTQUFTLENBQUMsU0FBUyxHQUFHLFVBQVUsUUFBZ0I7SUFDckQsT0FBTyxRQUFRLENBQUMsZ0JBQWdCLENBQUMsUUFBUSxDQUFDLENBQUM7Q0FDOUMsQ0FBQztBQUVGLFFBQVEsQ0FBQyxTQUFTLENBQUMsTUFBTSxHQUFHLFVBQVUsSUFBWTs7SUFDOUMsSUFBSSxXQUFXLEdBQUcsUUFBUSxDQUFDLGFBQWEsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUNoRCxXQUFXLENBQUMsU0FBUyxHQUFHLElBQUksQ0FBQztJQUM3Qix5QkFBZ0IsV0FBVyxDQUFDLFVBQVUsQ0FBQyxDQUFDLENBQUMsRUFBQztDQUM3QyxDQUFDO0FBRUYsUUFBUSxDQUFDLFNBQVMsQ0FBQyxPQUFPLEdBQUcsVUFBVSxRQUFrQjtJQUNyRCxLQUFLLElBQUksQ0FBQyxHQUFHLENBQUMsRUFBRSxDQUFDLEdBQUcsSUFBSSxDQUFDLE1BQU0sRUFBRSxDQUFDLEVBQUUsRUFBRTtRQUNsQyxRQUFRLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0tBQ3hCO0NBQ0osQ0FBQztBQUVGLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFBSSxHQUFHO0lBQ3RCLE9BQU8sSUFBSSxDQUFDLElBQUksQ0FBQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLENBQUM7Q0FDaEMsQ0FBQztBQUVGLE9BQU8sQ0FBQyxTQUFTLENB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QUFtQixRQUFRLENBQUMsU0FBUyxDQUFDLCtCQUE2QixNQUFJLGVBQVksQ0FBQyxFQUFDLENBQUMsS0FBSyxDQUFDO2dCQUN2RztvQkFDSSxPQUFPLElBQUksQ0FBQyxLQUFLLENBQUM7YUFDekI7U0FDSjthQUFNLElBQUksSUFBSSxDQUFDLFFBQVEsQ0FBQyxLQUFLLEVBQUUsS0FBSyxRQUFRLEVBQUU7WUFDM0MsT0FBTyxJQUFJLENBQUMsT0FBTyxDQUFDLElBQUksQ0FBQyxhQUFhLENBQUMsQ0FBQyxLQUFLLENBQUM7U0FDakQ7S0FDSjtJQUNELE9BQU8sR0FBRyxDQUFDO0NBQ2QsQ0FBQyIsInNvdXJjZXNDb250ZW50IjpbImludGVyZmFjZSBEb2N1bWVudCB7XHJcbiAgICBTZWxlY3RPbmU6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgU2VsZWN0QWxsOiAoc2VsZWN0b3I6IHN0cmluZykgPT4gTm9kZUxpc3RPZjxFbGVtZW50PjtcclxuICAgIENyZWF0ZTogKGh0bWw6IHN0cmluZykgPT4gRWxlbWVudDtcclxufVxyXG5cclxuaW50ZXJmYWNlIE5vZGVMaXN0IHtcclxuICAgIEZvckVhY2g6IChjYWxsYmFjazogRnVuY3Rpb24pID0+IHZvaWQ7XHJcbiAgICBMYXN0OiAoKSA9PiBFbGVtZW50O1xyXG59XHJcblxyXG5pbnRlcmZhY2UgRWxlbWVudCB7XHJcbiAgICBBdHRyaWJ1dGU6IChuYW1lOiBzdHJpbmcsIHZhbHVlPzogc3RyaW5nKSA9PiBzdHJpbmcgJiBFbGVtZW50O1xyXG4gICAgUGFyZW50OiAoKSA9PiBFbGVtZW50O1xyXG4gICAgRmlyc3Q6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgQXBwZW5kOiAoaHRtbDogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgRW1wdHk6ICgpID0+IEVsZW1lbnQ7XHJcbiAgICBEcm9wOiAoKSA9PiBFbGVtZW50O1xyXG4gICAgUmVtb3ZlRXZlbnQ6IChldmVudDogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgQWRkRXZlbnQ6IChldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIG92ZXJ3cml0ZT86IGJvb2xlYW4pID0+IEVsZW1lbnQ7XHJcbiAgICBTaG93OiAodD86IHN0cmluZykgPT4gRWxlbWVudDtcclxuICAgIEhpZGU6ICgpID0+IEVsZW1lbnQ7XHJcbiAgICBUb2dnbGU6ICgpID0+IEVsZW1lbnQ7XHJcbiAgICBBZGRDbGFzczogKGNsYXNzTmFtZTogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgUmVtb3ZlQ2xhc3M6IChjbGFzc05hbWU6IHN0cmluZykgPT4gRWxlbWVudDtcclxuICAgIEFzU3RyaW5nOiAoKSA9PiBzdHJpbmc7XHJcbiAgICBTZWxlY3RPbmU6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgU2VsZWN0QWxsOiAoc2VsZWN0b3I6IHN0cmluZykgPT4gTm9kZUxpc3RPZjxFbGVtZW50PjtcclxuICAgIEhhc01hdGNoZXM6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBib29sZWFuO1xyXG4gICAgVXA6IChzZWxlY3Rvcjogc3RyaW5nKSA9PiBFbGVtZW50O1xyXG4gICAgSXNIaWRkZW46ICgpID0+IEJvb2xlYW47XHJcbn1cclxuXHJcbmludGVyZmFjZSBIVE1MRWxlbWVudCB7XHJcbiAgICBDbGVhbjogKCkgPT4gSFRNTEVsZW1lbnQ7XHJcbiAgICBWYWx1ZTogKHZhbD86IHN0cmluZykgPT4gc3RyaW5nO1xyXG59XHJcblxyXG5cclxuXHJcbkRvY3VtZW50LnByb3RvdHlwZS5TZWxlY3RPbmUgPSBmdW5jdGlvbiAoc2VsZWN0b3I6IHN0cmluZyk6IEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG59O1xyXG5cclxuRG9jdW1lbnQucHJvdG90eXBlLlNlbGVjdEFsbCA9IGZ1bmN0aW9uIChzZWxlY3Rvcjogc3RyaW5nKTogTm9kZUxpc3RPZjxFbGVtZW50PiB7XHJcbiAgICByZXR1cm4gZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbChzZWxlY3Rvcik7XHJcbn07XHJcblxyXG5Eb2N1bWVudC5wcm90b3R5cGUuQ3JlYXRlID0gZnVuY3Rpb24gKGh0bWw6IHN0cmluZyk6IEVsZW1lbnQge1xyXG4gICAgbGV0IHBsYWNlaG9sZGVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgICBwbGFjZWhvbGRlci5pbm5lckhUTUwgPSBodG1sO1xyXG4gICAgcmV0dXJuIDxFbGVtZW50PnBsYWNlaG9sZGVyLmNoaWxkTm9kZXNbMF07XHJcbn07XHJcblxyXG5Ob2RlTGlzdC5wcm90b3R5cGUuRm9yRWFjaCA9IGZ1bmN0aW9uIChjYWxsYmFjazogRnVuY3Rpb24pOiB2b2lkIHtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICAgIGNhbGxiYWNrKGksIHRoaXNbaV0pO1xyXG4gICAgfVxyXG59O1xyXG5cclxuTm9kZUxpc3QucHJvdG90eXBlLkxhc3QgPSBmdW5jdGlvbiAoKTogRWxlbWVudCB7XHJcbiAgICByZXR1cm4gdGhpc1t0aGlzLmxlbmd0aCAtIDFdO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuU2VsZWN0T25lID0gZnVuY3Rpb24gKHNlbGVjdG9yOiBzdHJpbmcpOiBFbGVtZW50IHtcclxuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3Ioc2VsZWN0b3IpO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuU2VsZWN0QWxsID0gZnVuY3Rpb24gKHNlbGVjdG9yOiBzdHJpbmcpOiBOb2RlTGlzdE9mPEVsZW1lbnQ+IHtcclxuICAgIHJldHVybiB0aGlzLnF1ZXJ5U2VsZWN0b3JBbGwoc2VsZWN0b3IpO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuQXR0cmlidXRlID0gZnVuY3Rpb24gKG5hbWU6IHN0cmluZywgdmFsdWU/OiBzdHJpbmcpOiBzdHJpbmcgJiBFbGVtZW50IHtcclxuICAgIGlmICh2YWx1ZSAhPSBudWxsKSB7XHJcbiAgICAgICAgdGhpcy5zZXRBdHRyaWJ1dGUobmFtZSwgdmFsdWUpO1xyXG4gICAgICAgIHJldHVybiB0aGlzO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuZ2V0QXR0cmlidXRlKG5hbWUpO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuUGFyZW50ID0gZnVuY3Rpb24gKCk6IEVsZW1lbnQge1xyXG4gICAgcmV0dXJuIHRoaXMucGFyZW50Tm9kZTtcclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkhhc01hdGNoZXMgPSBmdW5jdGlvbiAoc2VsZWN0b3I6IHN0cmluZyk6IGJvb2xlYW4ge1xyXG4gICAgaWYgKCg8YW55PnRoaXMpLm1hdGNoZXMgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiAoPGFueT50aGlzKS5tYXRjaGVzKHNlbGVjdG9yKTtcclxuICAgIH0gZWxzZSBpZiAoKDxhbnk+dGhpcykubXNNYXRjaGVzU2VsZWN0b3IgIT0gbnVsbCkge1xyXG4gICAgICAgIHJldHVybiAoPGFueT50aGlzKS5tc01hdGNoZXNTZWxlY3RvcihzZWxlY3Rvcik7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gZmFsc2U7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5VcCA9IGZ1bmN0aW9uIChzZWxlY3Rvcjogc3RyaW5nKTogRWxlbWVudCB7XHJcbiAgICBsZXQgZWw6IEVsZW1lbnQgPSB0aGlzO1xyXG4gICAgaWYgKCg8YW55PmVsKS5jbG9zZXN0ICE9IG51bGwpIHtcclxuICAgICAgICByZXR1cm4gKDxhbnk+ZWwpLmNsb3Nlc3Qoc2VsZWN0b3IpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICB3aGlsZSAoZWwpIHtcclxuICAgICAgICAgICAgaWYgKGVsLkhhc01hdGNoZXMoc2VsZWN0b3IpKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gPEVsZW1lbnQ+ZWw7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgZWwgPSBlbC5wYXJlbnRFbGVtZW50O1xyXG4gICAgICAgIH1cclxuICAgIH1cclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkZpcnN0ID0gZnVuY3Rpb24gKHNlbGVjdG9yOiBzdHJpbmcpOiBFbGVtZW50IHtcclxuICAgIGZ1bmN0aW9uIF9kZWNlbmQobm9kZTogRWxlbWVudCk6IEVsZW1lbnQge1xyXG4gICAgICAgIGxldCBfY3VycmVudE5vZGUgPSBub2RlO1xyXG4gICAgICAgIGxldCBub2RlTGlzdDogTm9kZUxpc3QgPSBfY3VycmVudE5vZGUuY2hpbGROb2RlcztcclxuICAgICAgICBmb3IgKGxldCBpID0gMDsgaSA8IG5vZGVMaXN0Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgIGlmIChub2RlTGlzdFtpXS5ub2RlTmFtZS5Ub0xvd2VyKCkgPT09IHNlbGVjdG9yLlRvTG93ZXIoKSkge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIDxFbGVtZW50Pm5vZGVMaXN0W2ldO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIF9kZWNlbmQoX2N1cnJlbnROb2RlKTtcclxuICAgIH1cclxuICAgIHJldHVybiBfZGVjZW5kKHRoaXMpO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuQXBwZW5kID0gZnVuY3Rpb24gKGh0bWw6IHN0cmluZyk6IEVsZW1lbnQge1xyXG4gICAgdGhpcy5pbnNlcnRBZGphY2VudEhUTUwoJ2JlZm9yZWVuZCcsIGh0bWwpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5FbXB0eSA9IGZ1bmN0aW9uICgpOiBFbGVtZW50IHtcclxuICAgIHRoaXMuaW5uZXJIVE1MID0gJyc7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkRyb3AgPSBmdW5jdGlvbiAoKTogRWxlbWVudCB7XHJcbiAgICBsZXQgc2VsZiA9IHRoaXM7XHJcbiAgICBsZXQgcGFyZW50ID0gc2VsZi5wYXJlbnROb2RlO1xyXG4gICAgcGFyZW50LnJlbW92ZUNoaWxkKHNlbGYpO1xyXG4gICAgcmV0dXJuIHNlbGY7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5SZW1vdmVFdmVudCA9IGZ1bmN0aW9uIChldmVudDogc3RyaW5nKTogRWxlbWVudCB7XHJcbiAgICBsZXQgZXZ0ID0gdGhpc1tgb24ke2V2ZW50fWBdIHx8IHRoaXNbYCR7ZXZlbnR9YF07XHJcbiAgICB0cnkge1xyXG4gICAgICAgIHRoaXMucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgZXZ0KTtcclxuICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgdHJ5IHtcclxuICAgICAgICB0aGlzLmRldGFjaEV2ZW50KGBvbiR7ZXZlbnR9YCwgZXZ0KTtcclxuICAgIH0gY2F0Y2ggKGUpIHsgfVxyXG4gICAgdGhpc1tgb24ke2V2ZW50fWBdID0gbnVsbDtcclxuICAgIHRoaXNbYCR7ZXZlbnR9YF0gPSBudWxsO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5BZGRFdmVudCA9IGZ1bmN0aW9uIChldmVudDogc3RyaW5nLCBjYWxsYmFjazogRnVuY3Rpb24sIG92ZXJ3cml0ZTogYm9vbGVhbiA9IGZhbHNlKTogRWxlbWVudCB7XHJcbiAgICBpZiAob3ZlcndyaXRlKSB7XHJcbiAgICAgICAgdGhpc1tgb24ke2V2ZW50fWBdID0gY2FsbGJhY2s7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHRoaXMuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgY2FsbGJhY2spO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5TaG93ID0gZnVuY3Rpb24gKHQ6IHN0cmluZyA9ICdibG9jaycpOiBFbGVtZW50IHtcclxuICAgIGxldCBzdHlsZXMgPSB0aGlzLmF0dHJpYnV0ZSgnc3R5bGUnKTtcclxuICAgIGlmIChzdHlsZXMgIT0gbnVsbCAmJiBzdHlsZXMgIT09ICcnKSB7XHJcbiAgICAgICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlKCdzdHlsZScsIHN0eWxlcy5zZXRWYWx1ZUJ5S2V5KCdkaXNwbGF5JywgdCkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5OiR7dH1gKTtcclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkhpZGUgPSBmdW5jdGlvbiAoKTogRWxlbWVudCB7XHJcbiAgICBsZXQgc3R5bGVzID0gdGhpcy5hdHRyaWJ1dGUoJ3N0eWxlJyk7XHJcbiAgICBpZiAoc3R5bGVzICE9IG51bGwgJiYgc3R5bGVzICE9PSAnJykge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmF0dHJpYnV0ZSgnc3R5bGUnLCBzdHlsZXMuc2V0VmFsdWVCeUtleSgnZGlzcGxheScsICdub25lJykpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHRoaXMuYXR0cmlidXRlKCdzdHlsZScsIGBkaXNwbGF5Om5vbmU7YCk7XHJcbn07XHJcbkVsZW1lbnQucHJvdG90eXBlLlRvZ2dsZSA9IGZ1bmN0aW9uICgpOiBFbGVtZW50IHtcclxuICAgIGlmICghKHRoaXMub2Zmc2V0V2lkdGggfHwgdGhpcy5vZmZzZXRIZWlnaHQgfHwgdGhpcy5nZXRDbGllbnRSZWN0cygpLmxlbmd0aCkpIHtcclxuICAgICAgICByZXR1cm4gdGhpcy5zaG93KCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiB0aGlzLmhpZGUoKTtcclxuICAgIH1cclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkFkZENsYXNzID0gZnVuY3Rpb24gKGNsYXNzTmFtZTogc3RyaW5nKTogRWxlbWVudCB7XHJcbiAgICB0aGlzLmNsYXNzTmFtZSArPSBgICR7Y2xhc3NOYW1lfWA7XHJcbiAgICB0aGlzLmNsYXNzTmFtZSA9IHRoaXMuY2xhc3NOYW1lLnRyaW0oKTtcclxuICAgIHJldHVybiB0aGlzO1xyXG59O1xyXG5cclxuRWxlbWVudC5wcm90b3R5cGUuUmVtb3ZlQ2xhc3MgPSBmdW5jdGlvbiAoY2xhc3NOYW1lOiBzdHJpbmcpOiBFbGVtZW50IHtcclxuICAgIHRoaXMuY2xhc3NOYW1lID0gKDxzdHJpbmc+dGhpcy5jbGFzc05hbWUpLnJlcGxhY2UoY2xhc3NOYW1lLCAnJykubm9ybWFsaXplKCk7XHJcbiAgICByZXR1cm4gdGhpcztcclxufTtcclxuXHJcbkVsZW1lbnQucHJvdG90eXBlLkFzU3RyaW5nID0gZnVuY3Rpb24gKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gdGhpcy5vdXRlckhUTUw7XHJcbn07XHJcblxyXG5FbGVtZW50LnByb3RvdHlwZS5Jc0hpZGRlbiA9IGZ1bmN0aW9uICgpOiBib29sZWFuIHtcclxuICAgIHJldHVybiAodGhpcy5vZmZzZXRQYXJlbnQgPT09IG51bGwpO1xyXG59O1xyXG5cclxuSFRNTEVsZW1lbnQucHJvdG90eXBlLkNsZWFuID0gZnVuY3Rpb24gKCk6IEhUTUxFbGVtZW50IHtcclxuICAgIHRoaXMudmFsdWUgPSB0aGlzLnZhbHVlLnJlcGxhY2UoL1xccj9cXG4vZywgJ1xcclxcbicpO1xyXG4gICAgcmV0dXJuIHRoaXM7XHJcbn07XHJcblxyXG5IVE1MRWxlbWVudC5wcm90b3R5cGUuVmFsdWUgPSBmdW5jdGlvbiAodmFsPzogc3RyaW5nKTogc3RyaW5nIHtcclxuICAgIGlmICh2YWwgIT0gbnVsbCkge1xyXG4gICAgICAgIGlmICh0aGlzLm5vZGVOYW1lLmxvd2VyKCkgPT09ICd0ZXh0YXJlYScpIHtcclxuICAgICAgICAgICAgdGhpcy5pbm5lckhUTUwgPSB2YWw7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLmlubmVyVGV4dCA9IHZhbDtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICB9IGNhdGNoIChlKSB7IH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZU5hbWUubG93ZXIoKSA9PT0gJ2lucHV0Jykge1xyXG4gICAgICAgICAgICBzd2l0Y2ggKHRoaXMuYXR0cmlidXRlKCd0eXBlJykubG93ZXIoKSkge1xyXG4gICAgICAgICAgICAgICAgY2FzZSAnZmlsZSc6XHJcbiAgICAgICAgICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XHJcbiAgICAgICAgICAgICAgICAgICAgaWYgKDxib29sZWFuPjxhbnk+dmFsKSB7XHJcbiAgICAgICAgICAgICAgICAgICAgICAgIHRoaXMuY2hlY2tlZCA9IHRydWU7XHJcbiAgICAgICAgICAgICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgICAgICAgICAgICAgdGhpcy5jaGVja2VkID0gZmFsc2U7XHJcbiAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgY2FzZSAncmFkaW8nOlxyXG4gICAgICAgICAgICAgICAgICAgIGxldCBuYW1lOiBzdHJpbmcgPSB0aGlzLmF0dHJpYnV0ZSgnbmFtZScpO1xyXG4gICAgICAgICAgICAgICAgICAgIGxldCByYWRpb3M6IE5vZGVMaXN0T2Y8RWxlbWVudD4gPSBkb2N1bWVudC5TZWxlY3RBbGwoYGlucHV0W3R5cGU9J3JhZGlvJ11bbmFtZT0nJHtuYW1lfSddYCk7XHJcbiAgICAgICAgICAgICAgICAgICAgcmFkaW9zLkZvckVhY2goZnVuY3Rpb24gKGlkeCwgZWxlbTogRWxlbWVudCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICBpZiAoZWxlbS5BdHRyaWJ1dGUoJ3ZhbHVlJykgPT09IHZhbCkge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmVsZW0pLmNoZWNrZWQgPSB0cnVlO1xyXG4gICAgICAgICAgICAgICAgICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgICAgICAgICAgICAgICAgICAgKDxIVE1MSW5wdXRFbGVtZW50PmVsZW0pLmNoZWNrZWQgPSBmYWxzZTtcclxuICAgICAgICAgICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICAgICAgICAgIH0pO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgZGVmYXVsdDpcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnZhbHVlID0gdmFsO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIGlmICh0aGlzLm5vZGVOYW1lLmxvd2VyKCkgPT09ICdzZWxlY3QnKSB7XHJcbiAgICAgICAgICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5vcHRpb25zLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgICAgICAgICAgICBpZiAodGhpcy5vcHRpb25zW2ldLnZhbHVlID09PSB2YWwpIHtcclxuICAgICAgICAgICAgICAgICAgICB0aGlzLnNlbGVjdGVkSW5kZXggPSBpO1xyXG4gICAgICAgICAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgfSBlbHNlIHtcclxuICAgICAgICBpZiAodGhpcy5ub2RlTmFtZS5sb3dlcigpID09PSAndGV4dGFyZWEnKSB7XHJcbiAgICAgICAgICAgIHRyeSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy52YWx1ZTtcclxuICAgICAgICAgICAgfSBjYXRjaCAoZSkgeyB9XHJcbiAgICAgICAgICAgIGlmICh0aGlzLmlubmVyVGV4dCAhPSBudWxsICYmICg8c3RyaW5nPnRoaXMuaW5uZXJUZXh0KS50cmltKCkgIT09ICcnKSB7XHJcbiAgICAgICAgICAgICAgICByZXR1cm4gdGhpcy5pbm5lclRleHQ7XHJcbiAgICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5pbm5lckhUTUwgIT0gbnVsbCAmJiAoPHN0cmluZz50aGlzLmlubmVySFRNTCkudHJpbSgpICE9PSAnJykge1xyXG4gICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuaW5uZXJIVE1MO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIHJldHVybiBudWxsO1xyXG4gICAgICAgIH0gZWxzZSBpZiAodGhpcy5ub2RlTmFtZS5sb3dlcigpID09PSAnaW5wdXQnKSB7XHJcbiAgICAgICAgICAgIHN3aXRjaCAodGhpcy5hdHRyaWJ1dGUoJ3R5cGUnKS5sb3dlcigpKSB7XHJcbiAgICAgICAgICAgICAgICBjYXNlICdjaGVja2JveCc6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMuY2hlY2tlZDtcclxuICAgICAgICAgICAgICAgIGNhc2UgJ3JhZGlvJzpcclxuICAgICAgICAgICAgICAgICAgICBsZXQgbmFtZTogc3RyaW5nID0gdGhpcy5hdHRyaWJ1dGUoJ25hbWUnKTtcclxuICAgICAgICAgICAgICAgICAgICByZXR1cm4gKDxIVE1MSW5wdXRFbGVtZW50PmRvY3VtZW50LlNlbGVjdE9uZShgaW5wdXRbdHlwZT0ncmFkaW8nXVtuYW1lPScke25hbWV9J106Y2hlY2tlZGApKS52YWx1ZTtcclxuICAgICAgICAgICAgICAgIGRlZmF1bHQ6XHJcbiAgICAgICAgICAgICAgICAgICAgcmV0dXJuIHRoaXMudmFsdWU7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICB9IGVsc2UgaWYgKHRoaXMubm9kZU5hbWUubG93ZXIoKSA9PT0gJ3NlbGVjdCcpIHtcclxuICAgICAgICAgICAgcmV0dXJuIHRoaXMub3B0aW9uc1t0aGlzLnNlbGVjdGVkSW5kZXhdLnZhbHVlO1xyXG4gICAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiB2YWw7XHJcbn07Il19